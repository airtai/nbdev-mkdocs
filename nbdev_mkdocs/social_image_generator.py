# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/Social_Image_Generator.ipynb.

# %% auto 0
__all__ = ['generate_custom_social_image']

# %% ../nbs/Social_Image_Generator.ipynb 1
from typing import *
from pathlib import Path
import re
import asyncio
import shutil
from tempfile import TemporaryDirectory

import openai
import typer
from playwright.async_api import async_playwright
from ruamel.yaml import YAML

from ._helpers.utils import set_cwd, get_value_from_config
from ._package_data import get_root_data_path

# %% ../nbs/Social_Image_Generator.ipynb 2
def _generate_ai_image(prompt: str, n: int = 1, size: str = "512x512") -> str:
    """Generate an image for social card using the OpenAI Image API.

    Args:
        prompt: The prompt to use for generating the image.
        n: The number of images to generate (default 1).
        size: The size of the image to generate (default "1024x1024").

    Returns:
        The URL of the generated image.
    """
    try:
        response = openai.Image.create(prompt=prompt, n=n, size=size)
        image_url = response["data"][0]["url"]

    except Exception as e:
        typer.echo(f"Request to OpenAI failed: {e}")
        typer.echo("Using the default social image.")

        image_url = "default_social_logo.png"

    return image_url

# %% ../nbs/Social_Image_Generator.ipynb 4
def _generate_html_str(root_path: str, image_url: str) -> str:
    """Generate html string for the social card

    Args:
        root_path: The root path of the project.
        image_url: The image URL to be included in the HTML.
    """

    with set_cwd(root_path):

        _custom_social_image_template_path = (
            get_root_data_path() / "custom-social-image-template.html"
        )

        with open(_custom_social_image_template_path, "r") as f:
            _html_template = f.read()

        author_name = get_value_from_config(root_path, "author")
        project_name = get_value_from_config(root_path, "repo")
        project_description = get_value_from_config(root_path, "description")

        d = dict(
            author_name=author_name,
            project_name=project_name,
            project_description=project_description,
            image_url=image_url,
        )

        return _html_template.format(**d)

# %% ../nbs/Social_Image_Generator.ipynb 6
async def _capture_and_save_screenshot(src_path: str, dst_path: str):
    """Capture screenshot of an HTML file from source directory and save the
    output in destination directory

    Args:
        src_path: The source path of the HTML file that will be used to generate the PNG image.
        dst_path: The destination path where the generated screenshot image will be saved.
    """
    playwright = await async_playwright().start()
    browser = await playwright.chromium.launch()
    page = await browser.new_page()

    html_path = Path(src_path) / "social_image.html"
    await page.goto(f"file://{str(html_path.resolve())}")

    png_path = (
        Path(dst_path) / "mkdocs" / "docs_overrides" / "images" / "social_image.png"
    )
    await page.screenshot(path=str(png_path.resolve()))
    await browser.close()

# %% ../nbs/Social_Image_Generator.ipynb 8
async def _create_social_image(root_path: str, image_url: str):
    """Create social image for the project

    Args:
        root_path: The root path of the project.
        image_url: The image URL to be included in the social image.
    """
    html_str = _generate_html_str(root_path, image_url)

    with TemporaryDirectory() as d:

        html_path = Path(d) / "social_image.html"
        with open(html_path, "w") as f:
            f.write(html_str)

        if image_url == "default_social_logo.png":
            shutil.copyfile(
                Path(root_path)
                / "mkdocs"
                / "docs_overrides"
                / "images"
                / "default_social_logo.png",
                Path(d) / "default_social_logo.png",
            )

        await _capture_and_save_screenshot(d, root_path)

# %% ../nbs/Social_Image_Generator.ipynb 10
def _update_social_image_in_mkdocs_yml(root_path: str, image_url: Optional[str] = None):
    """Update social image link in mkdocs yml file

    Args:
        root_path: The root path of the project.
        image_url: The image URL to update in the mkdocs yml file.
    """

    if not image_url:
        social_image_path = (
            Path(root_path)
            / "mkdocs"
            / "docs_overrides"
            / "images"
            / "social_image.png"
        )

        if not social_image_path.exists():
            typer.secho(
                f"Unexpected error: path {social_image_path.resolve()} does not exists!",
                err=True,
                fg=typer.colors.RED,
            )
            raise typer.Exit(code=1)

        image_url = "overrides/images/social_image.png"

    yaml = YAML()
    mkdocs_yml_path = Path(root_path) / "mkdocs" / "mkdocs.yml"
    config = yaml.load(mkdocs_yml_path)
    config["extra"]["social_image"] = image_url
    yaml.dump(config, mkdocs_yml_path)

# %% ../nbs/Social_Image_Generator.ipynb 12
def _update_social_image_in_site_overrides(root_path: str):
    """Update social image link in site_overrides HTML template

    Args:
        root_path: The root path of the project.
    """
    with set_cwd(root_path):
        site_overrides_path = (
            Path(root_path) / "mkdocs" / "site_overrides" / "main.html"
        )
        if not site_overrides_path.exists():
            typer.secho(
                f"Unexpected error: path {site_overrides_path.resolve()} does not exists!",
                err=True,
                fg=typer.colors.RED,
            )
            raise typer.Exit(code=1)

        with open(site_overrides_path, "r") as f:
            _new_text = f.read()
            _pattern = re.compile(r".*?{%.*?image_url = (.*)%}")
            _match = re.search(_pattern, _new_text)
            _new_text = _new_text.replace(
                _match.group(1), 'page.canonical_url ~ "" ~ config.extra.social_image '  # type: ignore
            )

        with open(site_overrides_path, "w") as f:
            f.write(_new_text)

# %% ../nbs/Social_Image_Generator.ipynb 14
async def generate_custom_social_image(root_path: str, prompt: str):
    """Generate a custom image for social card using the OpenAI Image API.

    Args:
        root_path: The root path of the project.
        prompt: The prompt to use for generating the image.
    """

    image_url = _generate_ai_image(prompt=prompt)

    await _create_social_image(root_path, image_url)

    _update_social_image_in_mkdocs_yml(root_path)

    _update_social_image_in_site_overrides(root_path)
