# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/Social_Card_Generator.ipynb.

# %% auto 0
__all__ = ['generate_custom_social_image']

# %% ../nbs/Social_Card_Generator.ipynb 1
import asyncio
from typing import *
from pathlib import Path
import re

import openai
import typer
from playwright.async_api import async_playwright
from ruamel.yaml import YAML

from ._helpers.utils import set_cwd, get_value_from_config

# %% ../nbs/Social_Card_Generator.ipynb 3
def _generate_ai_image(prompt: str, n: int = 1, size: str = "1024x1024") -> str:
    """Generate an image for social card using the OpenAI Image API.

    Args:
        prompt: The prompt to use for generating the image.
        n: The number of images to generate (default 1).
        size: The size of the image to generate (default "1024x1024").

    Returns:
        The URL of the generated image.
    """
    response = openai.Image.create(prompt=prompt, n=n, size=size)
    image_url = response["data"][0]["url"]
    return image_url

# %% ../nbs/Social_Card_Generator.ipynb 5
_html_template = """<!DOCTYPE html>
<html>
<head>
</head>
<body>
<div style="width: 300px; float:left;margin:10px">
    <h1>{project_name}</h1>
    <p>{project_description}</p>
</div>
<div style="width: 150px; float:left;margin:10px">
    <img src="{image_url}" />
</div>
</body>
</html>
"""


def _generate_html(root_path: str, image_url: str):

    with set_cwd(root_path):

        project_name = get_value_from_config(root_path, "repo")
        project_description = get_value_from_config(root_path, "description")

        d = dict(
            project_name=project_name,
            project_description=project_description,
            image_url=image_url,
        )

        html_path = Path(root_path) / "mkdocs" / "social_image.html"
        with open(html_path, "w") as f:
            f.write(_html_template.format(**d))

# %% ../nbs/Social_Card_Generator.ipynb 7
async def _generate_png_from_html(root_path: str):

    with set_cwd(root_path):

        html_path = Path(root_path) / "mkdocs" / "social_image.html"
        if not html_path.exists():
            typer.secho(
                f"Unexpected error: path {html_path.resolve()} does not exists!",
                err=True,
                fg=typer.colors.RED,
            )
            raise typer.Exit(code=1)

        playwright = await async_playwright().start()
        browser = await playwright.chromium.launch()
        page = await browser.new_page()

        await page.goto(f"file://{str(html_path.resolve())}")

        png_path = Path(root_path) / "mkdocs" / "docs_overrides" / "images"
        await page.screenshot(path=f"{str(png_path)}/social_image.png")
        await browser.close()

        html_path.unlink()

# %% ../nbs/Social_Card_Generator.ipynb 9
def _update_social_image_in_mkdocs_yml(root_path: str, image_url: Optional[str] = None):

    if not image_url:
        social_image_path = (
            Path(root_path)
            / "mkdocs"
            / "docs_overrides"
            / "images"
            / "social_image.png"
        )

        if not social_image_path.exists():
            typer.secho(
                f"Unexpected error: path {social_image_path.resolve()} does not exists!",
                err=True,
                fg=typer.colors.RED,
            )
            raise typer.Exit(code=1)

        image_url = "overrides/images/social_image.png"

    yaml = YAML()
    mkdocs_yml_path = Path(root_path) / "mkdocs" / "mkdocs.yml"
    config = yaml.load(mkdocs_yml_path)
    config["extra"]["social_image"] = image_url
    yaml.dump(config, mkdocs_yml_path)

# %% ../nbs/Social_Card_Generator.ipynb 11
def _update_social_image_in_site_overrides(root_path: str):
    with set_cwd(root_path):
        site_overrides_path = (
            Path(root_path) / "mkdocs" / "site_overrides" / "main.html"
        )
        if not site_overrides_path.exists():
            typer.secho(
                f"Unexpected error: path {site_overrides_path.resolve()} does not exists!",
                err=True,
                fg=typer.colors.RED,
            )
            raise typer.Exit(code=1)

        with open(site_overrides_path, "r") as f:
            _new_text = f.read()
            _pattern = re.compile(r".*?{%.*?image_url = (.*)%}")
            _match = re.search(_pattern, _new_text)
            _new_text = _new_text.replace(
                _match.group(1), "page.canonical_url + config.extra.social_image "  # type: ignore
            )

        with open(site_overrides_path, "w") as f:
            f.write(_new_text)

# %% ../nbs/Social_Card_Generator.ipynb 13
async def generate_custom_social_image(root_path: str, prompt: str):

    #     image_url = _generate_ai_image(prompt=prompt)
    image_url = "https://via.placeholder.com/200"

    _generate_html(root_path, image_url)

    await _generate_png_from_html(root_path)

    _update_social_image_in_mkdocs_yml(root_path)

    _update_social_image_in_site_overrides(root_path)
