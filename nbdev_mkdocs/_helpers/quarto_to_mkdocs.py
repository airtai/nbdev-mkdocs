# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/Quarto_To_MkDocs_Syntax_Convertor.ipynb.

# %% auto 0
__all__ = ['MKDOCS_CALLOUT_TEMPLATE_WITHOUT_TITLE', 'MKDOCS_CALLOUT_TEMPLATE_WITH_TITLE']

# %% ../../nbs/Quarto_To_MkDocs_Syntax_Convertor.ipynb 1
import re
from pathlib import Path
from typing import *
import textwrap

import nbformat

# %% ../../nbs/Quarto_To_MkDocs_Syntax_Convertor.ipynb 3
def _update_conditional_content_tags(text: str) -> str:
    """Update conditional content tags.

    Args:
        text: The text to update the conditional content tags in.

    Returns:
        The updated text with the conditional content tags modified.

    !!! note

        The above docstring is autogenerated by docstring-gen library (https://github.com/airtai/docstring-gen)
    """
    pattern = r":::\s*{(?:\s*.*\.content-visible|\s*\.content-hidden)\s*(when|unless)-format\s*=\\\s*(\"|\')\s*(html|markdown)\s*\\(\"|\')\s*.*}"
    text = re.sub(
        pattern,
        lambda m: m.group(0).replace(
            m.group(1), "when" if m.group(1) == "unless" else "unless"
        ),
        text,
    )
    return text

# %% ../../nbs/Quarto_To_MkDocs_Syntax_Convertor.ipynb 6
def _update_mermaid_chart_tags(text: str) -> str:
    """Convert the mermaid chart tags from quarto format to markdown format.

    Args:
        text: The text to update the mermaid chart tags in.

    Returns:
        The updated text with the mermaid chart tags modified.

    !!! note

        The above docstring is autogenerated by docstring-gen library (https://github.com/airtai/docstring-gen)
    """
    pattern = r"```\s*{mermaid\s*}"
    text = re.sub(pattern, "``` mermaid", text)
    return text

# %% ../../nbs/Quarto_To_MkDocs_Syntax_Convertor.ipynb 8
def _add_markdown_attribute_to_enable_md_in_html(text: str) -> str:
    """Add markdown attribute to enable markdown in html.

    Args:
        text: The text to add the markdown attribute to

    Returns:
        The text with the markdown attribute added

    !!! note

        The above docstring is autogenerated by docstring-gen library (https://github.com/airtai/docstring-gen)
    """
    pattern = r":::\s*{\s*(markdown=1)?\s*"
    text = re.sub(pattern, r"::: {markdown=1 ", text)
    return text

# %% ../../nbs/Quarto_To_MkDocs_Syntax_Convertor.ipynb 10
def _get_callout_identifier(text: str) -> str:
    """Returns the callout identifier based on the input text.

    Args:
        text (str): The text to parse.

    Returns:
        str: The callout identifier ('???' if 'collapse="true"', '???+' if
            'collapse="false"', '!!!' otherwise).
    """
    if 'collapse="true"' in text or "collapse='true'" in text:
        ret_val = "???"
    elif 'collapse="false"' in text or "collapse='false'" in text:
        ret_val = "???+"
    else:
        ret_val = "!!!"

    return ret_val

# %% ../../nbs/Quarto_To_MkDocs_Syntax_Convertor.ipynb 12
def _get_callout_title_and_content(
    callout_attributes: str, callout_content: str
) -> Tuple[Optional[str], str]:
    """Get the title and content of a callout based on its attributes and content.

    Args:
        callout_attributes: The attributes of the callout.
        callout_content: The content of the callout.

    Returns:
        A tuple containing the title of the callout (if any) and the content of the callout.
    """
    title = None
    title_regex = r"title=['\"]([\w\s]+)['\"]"
    if "title=" in callout_attributes:
        match = re.search(title_regex, callout_attributes)
        if match:
            title = match.group(1)
    elif (
        "icon=false" in callout_attributes
        or 'appearance="minimal"' in callout_attributes
        or "appearance='minimal'" in callout_attributes
    ):
        title = ""
    elif callout_content.split("\n")[0].startswith("##"):
        title = callout_content.split("\n")[0].replace("##", "").strip()
        callout_content = "\n".join(callout_content.split("\n")[2:])

    return title, callout_content

# %% ../../nbs/Quarto_To_MkDocs_Syntax_Convertor.ipynb 17
MKDOCS_CALLOUT_TEMPLATE_WITHOUT_TITLE = """{callout_identifier} {callout_type}

{callout_content}"""

MKDOCS_CALLOUT_TEMPLATE_WITH_TITLE = """{callout_identifier} {callout_type} {callout_title}

{callout_content}"""


def _fix_callout_syntax(text: str) -> str:
    """Fix the syntax of callout blocks in the input text

    Args:
        text: The input text for which the callout syntax needs to be changed.

    Returns:
        The text with callout blocks converted to the mkdocs format.
    """
    pattern = r":::\s*\{\.callout-(\w+)([^}]*)\}\s*([\s\S]*?):::"
    matches = re.finditer(pattern, text)
    for match in matches:
        callout_identifier = _get_callout_identifier(match.group(2))
        callout_type = match.group(1)
        callout_content = match.group(3)
        callout_title, callout_content = _get_callout_title_and_content(
            match.group(2), callout_content
        )

        if callout_title is None:
            mkdocs_callout = MKDOCS_CALLOUT_TEMPLATE_WITHOUT_TITLE.format(
                callout_identifier=callout_identifier,
                callout_type=callout_type,
                callout_content=textwrap.indent(callout_content, " " * 4),
            )
        else:
            mkdocs_callout = MKDOCS_CALLOUT_TEMPLATE_WITH_TITLE.format(
                callout_identifier=callout_identifier,
                callout_type=callout_type,
                callout_title=f'\\"{callout_title}\\"',
                callout_content=textwrap.indent(callout_content, " " * 4),
            )

        text = text.replace(match.group(0), mkdocs_callout, 1)
    return text

# %% ../../nbs/Quarto_To_MkDocs_Syntax_Convertor.ipynb 22
def _fix_callout_syntax_in_file(text: str) -> str:
    """Converts the callout blocks syntax in the given text from quarto format to the mkdocs format.

    Args:
        text: The contents of a QMD file or a notebook in JSON string format.

    Returns:
        The contents of the QMD file or the notebook in JSON string format with the callout blocks syntax converted to the mkdocs format.
    """
    contents: str = ""
    try:
        nb = nbformat.reads(text, as_version=4)
        for cell in nb.cells:
            if cell.cell_type == "markdown":
                original_src = cell["source"]
                modified_src = _fix_callout_syntax(original_src)
                cell["source"] = modified_src

        contents = nbformat.writes(nb)
    except nbformat.reader.NotJSONError as e:
        contents = _fix_callout_syntax(text)
    return contents

# %% ../../nbs/Quarto_To_MkDocs_Syntax_Convertor.ipynb 25
def _update_quarto_tags_to_markdown_format(nb_path: Path) -> None:
    """Update Quarto tags to Markdown format

    Args:
        nb_path: Path to the notebook

    !!! note

        The above docstring is autogenerated by docstring-gen library (https://github.com/airtai/docstring-gen)
    """
    with open(nb_path, "r") as f:
        contents = f.read()

    contents = _update_conditional_content_tags(contents)
    contents = _update_mermaid_chart_tags(contents)
    contents = _fix_callout_syntax_in_file(contents)
    contents = _add_markdown_attribute_to_enable_md_in_html(contents)

    with open(nb_path, "w") as f:
        f.write(contents)
