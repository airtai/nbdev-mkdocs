{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"nbdev_mkdocs \u00a4 This file will become your README and also the index of your documentation. Install \u00a4 pip install nbdev_mkdocs How to use \u00a4 def f ( s : str , i : int ): \"\"\" A simple function Params: s: a name i: a number Example: ```python s = \"Hello World! \" i = 2 print(s * i) ``` \"\"\" print (( s + \" \" ) * i ) You can use the following code to run example from the function\u2019s documentation above: from nbdev_mkdocs.docstring import run_examples_from_docstring run_examples_from_docstring ( f , supress_stderr = True ) WARNING:griffe.docstrings.google:<module>:3: No type or annotation for parameter 's' WARNING:griffe.docstrings.google:<module>:4: No type or annotation for parameter 'i' WARNING:griffe.docstrings.google:<module>:5: Failed to get 'name: description' pair from '' Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 s = \"Hello World! \" i = 2 print ( s * i ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Hello World! Hello World! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 N/A","title":"Home"},{"location":"#nbdev_mkdocs","text":"This file will become your README and also the index of your documentation.","title":"nbdev_mkdocs"},{"location":"#install","text":"pip install nbdev_mkdocs","title":"Install"},{"location":"#how-to-use","text":"def f ( s : str , i : int ): \"\"\" A simple function Params: s: a name i: a number Example: ```python s = \"Hello World! \" i = 2 print(s * i) ``` \"\"\" print (( s + \" \" ) * i ) You can use the following code to run example from the function\u2019s documentation above: from nbdev_mkdocs.docstring import run_examples_from_docstring run_examples_from_docstring ( f , supress_stderr = True ) WARNING:griffe.docstrings.google:<module>:3: No type or annotation for parameter 's' WARNING:griffe.docstrings.google:<module>:4: No type or annotation for parameter 'i' WARNING:griffe.docstrings.google:<module>:5: Failed to get 'name: description' pair from '' Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 s = \"Hello World! \" i = 2 print ( s * i ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Hello World! Hello World! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 N/A","title":"How to use"},{"location":"SUMMARY/","text":"Home API nbdev_mkdocs.cli nbdev_mkdocs.docstring nbdev_mkdocs.mkdocs nbdev_mkdocs.package_data","title":"SUMMARY"},{"location":"API/nbdev_mkdocs/cli/","text":"new ( root_path =< typer . models . OptionInfo object at 0x7fee501a7d00 > ) \u00a4 CLI command for creating files for nbdev_mkdocs command Source code in nbdev_mkdocs/cli.py @_app . command ( help = \"Creates files in **mkdocs** subdirectory needed for other **nbdev_mkdocs** subcommands\" , ) def new ( root_path : str = typer . Option ( \".\" , help = \"\" )): \"\"\"CLI command for creating files for nbdev_mkdocs command\"\"\" try : nbdev_mkdocs . mkdocs . new ( root_path = root_path ) except Exception as e : typer . secho ( \"Unexpected internal error :/\" , err = True , fg = typer . colors . RED ) raise typer . Exit ( 1 ) prepare ( root_path =< typer . models . OptionInfo object at 0x7fee501a7ee0 > ) \u00a4 CLI command for creating files for nbdev_mkdocs command Source code in nbdev_mkdocs/cli.py @_app . command ( help = \"Prepares files in **mkdocs/docs** and then runs **mkdocs build** command on them \" , ) def prepare ( root_path : str = typer . Option ( \".\" , help = \"\" )): \"\"\"CLI command for creating files for nbdev_mkdocs command\"\"\" try : nbdev_mkdocs . mkdocs . prepare ( root_path = root_path ) except Exception as e : typer . secho ( \"Unexpected internal error :/\" , err = True , fg = typer . colors . RED ) raise typer . Exit ( 1 ) preview ( root_path =< typer . models . OptionInfo object at 0x7fee501a7f10 > ) \u00a4 CLI command for creating files for nbdev_mkdocs command Source code in nbdev_mkdocs/cli.py @_app . command ( help = \"Prepares files in **mkdocs/docs** and then runs **mkdocs serve** command on them \" , ) def preview ( root_path : str = typer . Option ( \".\" , help = \"\" )): \"\"\"CLI command for creating files for nbdev_mkdocs command\"\"\" try : nbdev_mkdocs . mkdocs . preview ( root_path = root_path , port = 4000 ) except Exception as e : typer . secho ( \"Unexpected internal error :/\" , err = True , fg = typer . colors . RED ) raise typer . Exit ( 1 )","title":"nbdev_mkdocs.cli"},{"location":"API/nbdev_mkdocs/cli/#nbdev_mkdocs.cli.new","text":"CLI command for creating files for nbdev_mkdocs command Source code in nbdev_mkdocs/cli.py @_app . command ( help = \"Creates files in **mkdocs** subdirectory needed for other **nbdev_mkdocs** subcommands\" , ) def new ( root_path : str = typer . Option ( \".\" , help = \"\" )): \"\"\"CLI command for creating files for nbdev_mkdocs command\"\"\" try : nbdev_mkdocs . mkdocs . new ( root_path = root_path ) except Exception as e : typer . secho ( \"Unexpected internal error :/\" , err = True , fg = typer . colors . RED ) raise typer . Exit ( 1 )","title":"new()"},{"location":"API/nbdev_mkdocs/cli/#nbdev_mkdocs.cli.prepare","text":"CLI command for creating files for nbdev_mkdocs command Source code in nbdev_mkdocs/cli.py @_app . command ( help = \"Prepares files in **mkdocs/docs** and then runs **mkdocs build** command on them \" , ) def prepare ( root_path : str = typer . Option ( \".\" , help = \"\" )): \"\"\"CLI command for creating files for nbdev_mkdocs command\"\"\" try : nbdev_mkdocs . mkdocs . prepare ( root_path = root_path ) except Exception as e : typer . secho ( \"Unexpected internal error :/\" , err = True , fg = typer . colors . RED ) raise typer . Exit ( 1 )","title":"prepare()"},{"location":"API/nbdev_mkdocs/cli/#nbdev_mkdocs.cli.preview","text":"CLI command for creating files for nbdev_mkdocs command Source code in nbdev_mkdocs/cli.py @_app . command ( help = \"Prepares files in **mkdocs/docs** and then runs **mkdocs serve** command on them \" , ) def preview ( root_path : str = typer . Option ( \".\" , help = \"\" )): \"\"\"CLI command for creating files for nbdev_mkdocs command\"\"\" try : nbdev_mkdocs . mkdocs . preview ( root_path = root_path , port = 4000 ) except Exception as e : typer . secho ( \"Unexpected internal error :/\" , err = True , fg = typer . colors . RED ) raise typer . Exit ( 1 )","title":"preview()"},{"location":"API/nbdev_mkdocs/docstring/","text":"run_examples_from_docstring ( o , * , supress_stdout = False , supress_stderr = False , sub_dict = None , width = 80 , ** kwargs ) \u00a4 Runs example from a docstring Parses docstring of an objects looking for examples. The examples are then saved into files and executed in a separate process. Note Execution context is not the same as the one in the notebook because we want examples to work from user code. Make sure you compiled the library prior to executing the examples, otherwise you might be running them agains an old version of the library. Parameters: Name Type Description Default o Any an object, typically a function or a class, for which docstring is being parsed for examples required supress_stdout bool omit stdout from output, typically due to security considerations False supress_stderr bool omit stderr from output, typically due to security considerations False sub_dict Optional[Dict[str, str]] a dictionary mapping regexp patterns into replacement strings used to mask stdout and stderr, typically used to mask sensitive information such as passwords None **kwargs arguments use to replace \"{fill in param }\" in docstring with the actual values when running examples {} Exceptions: Type Description ValueError if some params are missing from the kwargs RuntimeException if example fails Examples: from nbdev_mkdocs.docstring import run_examples_from_docstring def f (): ``` python Example : print ( \"Hello {fill in name}!\" ) print ( \"Goodbye {fill in other_name}!\" ) ``` pass run_examples_from_docstring ( f , name = \"John\" , other_name = \"Jane\" ) Source code in nbdev_mkdocs/docstring.py def run_examples_from_docstring ( o : Any , * , supress_stdout : bool = False , supress_stderr : bool = False , sub_dict : Optional [ Dict [ str , str ]] = None , width : Optional [ int ] = 80 , ** kwargs , ): \"\"\"Runs example from a docstring Parses docstring of an objects looking for examples. The examples are then saved into files and executed in a separate process. Note: Execution context is not the same as the one in the notebook because we want examples to work from user code. Make sure you compiled the library prior to executing the examples, otherwise you might be running them agains an old version of the library. Args: o: an object, typically a function or a class, for which docstring is being parsed for examples supress_stdout: omit stdout from output, typically due to security considerations supress_stderr: omit stderr from output, typically due to security considerations sub_dict: a dictionary mapping regexp patterns into replacement strings used to mask stdout and stderr, typically used to mask sensitive information such as passwords **kwargs: arguments use to replace \"{fill in **param**}\" in docstring with the actual values when running examples Raises: ValueError: if some params are missing from the **kwargs** RuntimeException: if example fails Example: ```python from nbdev_mkdocs.docstring import run_examples_from_docstring def f(): ```python Example: print(\"Hello {fill in name}!\") print(\"Goodbye {fill in other_name}!\") ``` pass run_examples_from_docstring(f, name=\"John\", other_name=\"Jane\") ``` \"\"\" console = Console ( width = width ) examples = _extract_examples_from_docstring ( o ) if len ( examples ) == 0 : raise ValueError ( f \"No examples found in: \\n { o . __doc__ } \" ) executable_examples = _replace_keywords ( examples , ** kwargs ) for example , executable_example in zip ( examples , executable_examples ): with TemporaryDirectory () as d : cmd_path = ( Path ( d ) / \"example.py\" ) . absolute () with open ( cmd_path , \"w\" ) as f : f . write ( executable_example ) process = run ( # nosec: B603 [ sys . executable , str ( cmd_path )], capture_output = True , text = True ) group = Group ( \"Example:\" , Rule ( \"code\" ), textwrap . indent ( example , \" \" * 4 ), _format_output ( process . stdout , title = \"stdout\" , supress = supress_stdout , sub_dict = sub_dict , width = width , ), _format_output ( process . stderr , title = \"stderr\" , supress = supress_stderr , sub_dict = sub_dict , width = width , ), ) # print(Panel(panel_group, width=width)) console . print ( group ) if process . returncode != 0 : raise RuntimeError ( process . stderr )","title":"nbdev_mkdocs.docstring"},{"location":"API/nbdev_mkdocs/docstring/#nbdev_mkdocs.docstring.run_examples_from_docstring","text":"Runs example from a docstring Parses docstring of an objects looking for examples. The examples are then saved into files and executed in a separate process. Note Execution context is not the same as the one in the notebook because we want examples to work from user code. Make sure you compiled the library prior to executing the examples, otherwise you might be running them agains an old version of the library. Parameters: Name Type Description Default o Any an object, typically a function or a class, for which docstring is being parsed for examples required supress_stdout bool omit stdout from output, typically due to security considerations False supress_stderr bool omit stderr from output, typically due to security considerations False sub_dict Optional[Dict[str, str]] a dictionary mapping regexp patterns into replacement strings used to mask stdout and stderr, typically used to mask sensitive information such as passwords None **kwargs arguments use to replace \"{fill in param }\" in docstring with the actual values when running examples {} Exceptions: Type Description ValueError if some params are missing from the kwargs RuntimeException if example fails Examples: from nbdev_mkdocs.docstring import run_examples_from_docstring def f (): ``` python Example : print ( \"Hello {fill in name}!\" ) print ( \"Goodbye {fill in other_name}!\" ) ``` pass run_examples_from_docstring ( f , name = \"John\" , other_name = \"Jane\" ) Source code in nbdev_mkdocs/docstring.py def run_examples_from_docstring ( o : Any , * , supress_stdout : bool = False , supress_stderr : bool = False , sub_dict : Optional [ Dict [ str , str ]] = None , width : Optional [ int ] = 80 , ** kwargs , ): \"\"\"Runs example from a docstring Parses docstring of an objects looking for examples. The examples are then saved into files and executed in a separate process. Note: Execution context is not the same as the one in the notebook because we want examples to work from user code. Make sure you compiled the library prior to executing the examples, otherwise you might be running them agains an old version of the library. Args: o: an object, typically a function or a class, for which docstring is being parsed for examples supress_stdout: omit stdout from output, typically due to security considerations supress_stderr: omit stderr from output, typically due to security considerations sub_dict: a dictionary mapping regexp patterns into replacement strings used to mask stdout and stderr, typically used to mask sensitive information such as passwords **kwargs: arguments use to replace \"{fill in **param**}\" in docstring with the actual values when running examples Raises: ValueError: if some params are missing from the **kwargs** RuntimeException: if example fails Example: ```python from nbdev_mkdocs.docstring import run_examples_from_docstring def f(): ```python Example: print(\"Hello {fill in name}!\") print(\"Goodbye {fill in other_name}!\") ``` pass run_examples_from_docstring(f, name=\"John\", other_name=\"Jane\") ``` \"\"\" console = Console ( width = width ) examples = _extract_examples_from_docstring ( o ) if len ( examples ) == 0 : raise ValueError ( f \"No examples found in: \\n { o . __doc__ } \" ) executable_examples = _replace_keywords ( examples , ** kwargs ) for example , executable_example in zip ( examples , executable_examples ): with TemporaryDirectory () as d : cmd_path = ( Path ( d ) / \"example.py\" ) . absolute () with open ( cmd_path , \"w\" ) as f : f . write ( executable_example ) process = run ( # nosec: B603 [ sys . executable , str ( cmd_path )], capture_output = True , text = True ) group = Group ( \"Example:\" , Rule ( \"code\" ), textwrap . indent ( example , \" \" * 4 ), _format_output ( process . stdout , title = \"stdout\" , supress = supress_stdout , sub_dict = sub_dict , width = width , ), _format_output ( process . stderr , title = \"stderr\" , supress = supress_stderr , sub_dict = sub_dict , width = width , ), ) # print(Panel(panel_group, width=width)) console . print ( group ) if process . returncode != 0 : raise RuntimeError ( process . stderr )","title":"run_examples_from_docstring()"},{"location":"API/nbdev_mkdocs/mkdocs/","text":"new ( root_path ) \u00a4 Initialize mkdocs project files Creates mkdocs directory in the root_path directory and populates it with initial values. You should edit mkdocs.yml file to customize it if needed. Parameters: Name Type Description Default root_path str path under which mkdocs directory will be created required Source code in nbdev_mkdocs/mkdocs.py def new ( root_path : str ): \"\"\"Initialize mkdocs project files Creates **mkdocs** directory in the **root_path** directory and populates it with initial values. You should edit mkdocs.yml file to customize it if needed. Params: root_path: path under which mkdocs directory will be created \"\"\" _add_requirements_to_settings ( root_path ) _create_mkdocs_dir ( root_path ) _create_mkdocs_yaml ( root_path ) prepare ( root_path ) \u00a4 Prepares mkdocs for serving Parameters: Name Type Description Default root_path str path under which mkdocs directory will be created required Source code in nbdev_mkdocs/mkdocs.py def prepare ( root_path : str ): \"\"\"Prepares mkdocs for serving Params: root_path: path under which mkdocs directory will be created \"\"\" # get lib name from settings.ini settings_path = Path ( root_path ) / \"settings.ini\" config = ConfigParser () config . read ( settings_path ) lib_name = config [ \"DEFAULT\" ][ \"lib_name\" ] build_summary ( root_path , lib_name ) cmd = f \"mkdocs build -f { root_path } /mkdocs/mkdocs.yml\" # nosemgrep: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true sp = subprocess . run ( # nosec: B602:subprocess_popen_with_shell_equals_true cmd , shell = True , # check=True, stdout = subprocess . PIPE , stderr = subprocess . STDOUT , text = True , ) print ( sp . stdout ) if sp . returncode != 0 : typer . secho ( f \"Command ' { cmd } ' failed!\" , err = True , fg = typer . colors . RED , ) raise typer . Exit ( 5 ) preview ( root_path , port = None ) \u00a4 Previes mkdocs documentation Parameters: Name Type Description Default root_path str path under which mkdocs directory will be created required port Optional[int] port to use None Source code in nbdev_mkdocs/mkdocs.py def preview ( root_path : str , port : Optional [ int ] = None ): \"\"\"Previes mkdocs documentation Params: root_path: path under which mkdocs directory will be created port: port to use \"\"\" cmd = f \"mkdocs serve -f { root_path } /mkdocs/mkdocs.yml -a 0.0.0.0\" if port : cmd = cmd + f \": { port } \" with subprocess . Popen ( #nosec B603:subprocess_without_shell_equals_true shlex . split ( cmd ), stdout = subprocess . PIPE , bufsize = 1 , text = True , universal_newlines = True , ) as p : for line in p . stdout : # type: ignore print ( line , end = \"\" ) if p . returncode != 0 : typer . secho ( f \"Command ' { cmd } ' failed!\" , err = True , fg = typer . colors . RED , ) raise typer . Exit ( 6 )","title":"nbdev_mkdocs.mkdocs"},{"location":"API/nbdev_mkdocs/mkdocs/#nbdev_mkdocs.mkdocs.new","text":"Initialize mkdocs project files Creates mkdocs directory in the root_path directory and populates it with initial values. You should edit mkdocs.yml file to customize it if needed. Parameters: Name Type Description Default root_path str path under which mkdocs directory will be created required Source code in nbdev_mkdocs/mkdocs.py def new ( root_path : str ): \"\"\"Initialize mkdocs project files Creates **mkdocs** directory in the **root_path** directory and populates it with initial values. You should edit mkdocs.yml file to customize it if needed. Params: root_path: path under which mkdocs directory will be created \"\"\" _add_requirements_to_settings ( root_path ) _create_mkdocs_dir ( root_path ) _create_mkdocs_yaml ( root_path )","title":"new()"},{"location":"API/nbdev_mkdocs/mkdocs/#nbdev_mkdocs.mkdocs.prepare","text":"Prepares mkdocs for serving Parameters: Name Type Description Default root_path str path under which mkdocs directory will be created required Source code in nbdev_mkdocs/mkdocs.py def prepare ( root_path : str ): \"\"\"Prepares mkdocs for serving Params: root_path: path under which mkdocs directory will be created \"\"\" # get lib name from settings.ini settings_path = Path ( root_path ) / \"settings.ini\" config = ConfigParser () config . read ( settings_path ) lib_name = config [ \"DEFAULT\" ][ \"lib_name\" ] build_summary ( root_path , lib_name ) cmd = f \"mkdocs build -f { root_path } /mkdocs/mkdocs.yml\" # nosemgrep: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true sp = subprocess . run ( # nosec: B602:subprocess_popen_with_shell_equals_true cmd , shell = True , # check=True, stdout = subprocess . PIPE , stderr = subprocess . STDOUT , text = True , ) print ( sp . stdout ) if sp . returncode != 0 : typer . secho ( f \"Command ' { cmd } ' failed!\" , err = True , fg = typer . colors . RED , ) raise typer . Exit ( 5 )","title":"prepare()"},{"location":"API/nbdev_mkdocs/mkdocs/#nbdev_mkdocs.mkdocs.preview","text":"Previes mkdocs documentation Parameters: Name Type Description Default root_path str path under which mkdocs directory will be created required port Optional[int] port to use None Source code in nbdev_mkdocs/mkdocs.py def preview ( root_path : str , port : Optional [ int ] = None ): \"\"\"Previes mkdocs documentation Params: root_path: path under which mkdocs directory will be created port: port to use \"\"\" cmd = f \"mkdocs serve -f { root_path } /mkdocs/mkdocs.yml -a 0.0.0.0\" if port : cmd = cmd + f \": { port } \" with subprocess . Popen ( #nosec B603:subprocess_without_shell_equals_true shlex . split ( cmd ), stdout = subprocess . PIPE , bufsize = 1 , text = True , universal_newlines = True , ) as p : for line in p . stdout : # type: ignore print ( line , end = \"\" ) if p . returncode != 0 : typer . secho ( f \"Command ' { cmd } ' failed!\" , err = True , fg = typer . colors . RED , ) raise typer . Exit ( 6 )","title":"preview()"},{"location":"API/nbdev_mkdocs/package_data/","text":"get_root_data_path () \u00a4 Returns path to package_data in lib Examples: from nbdev_mkdocs.package_data import get_root_data_path req_path = get_root_data_path () / \"requirements.txt\" print ( f \"Path is: { req_path . resolve () } \" ) assert req_path . exists () Source code in nbdev_mkdocs/package_data.py def get_root_data_path () -> Path : \"\"\"Returns path to package_data in lib Example: ``` python from nbdev_mkdocs.package_data import get_root_data_path req_path = get_root_data_path() / \"requirements.txt\" print(f\"Path is: {req_path.resolve()}\") assert req_path.exists() ``` \"\"\" return Path ( __file__ ) . parent / \"package_data\"","title":"nbdev_mkdocs.package_data"},{"location":"API/nbdev_mkdocs/package_data/#nbdev_mkdocs.package_data.get_root_data_path","text":"Returns path to package_data in lib Examples: from nbdev_mkdocs.package_data import get_root_data_path req_path = get_root_data_path () / \"requirements.txt\" print ( f \"Path is: { req_path . resolve () } \" ) assert req_path . exists () Source code in nbdev_mkdocs/package_data.py def get_root_data_path () -> Path : \"\"\"Returns path to package_data in lib Example: ``` python from nbdev_mkdocs.package_data import get_root_data_path req_path = get_root_data_path() / \"requirements.txt\" print(f\"Path is: {req_path.resolve()}\") assert req_path.exists() ``` \"\"\" return Path ( __file__ ) . parent / \"package_data\"","title":"get_root_data_path()"}]}