{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This file will become your README and also the index of your documentation. Install \u00a4 pip install nbdev_mkdocs How to use \u00a4 def f(s: str, i: int): \"\"\" A simple function Params: s: a name i: a number Example: ```python s = \"Hello World! \" i = 2 print(s * i) ``` \"\"\" print((s + \" \")*i) You can use the following code to run example from the function's documentation above: from nbdev_mkdocs.docstring import run_examples_from_docstring run_examples_from_docstring(f, supress_stderr=True) Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 s = \"Hello World! \" i = 2 print ( s * i ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Hello World! Hello World! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 N/A","title":"CLI 1"},{"location":"#install","text":"pip install nbdev_mkdocs","title":"Install"},{"location":"#how-to-use","text":"def f(s: str, i: int): \"\"\" A simple function Params: s: a name i: a number Example: ```python s = \"Hello World! \" i = 2 print(s * i) ``` \"\"\" print((s + \" \")*i) You can use the following code to run example from the function's documentation above: from nbdev_mkdocs.docstring import run_examples_from_docstring run_examples_from_docstring(f, supress_stderr=True) Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 s = \"Hello World! \" i = 2 print ( s * i ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Hello World! Hello World! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 N/A","title":"How to use"},{"location":"CLI/","text":"from typer.testing import CliRunner runner = CliRunner() #|output: asis #| echo: false show_doc(preview) source {target=\"_blank\" style=\"float:right; font-size:smaller\"} preview \u00a4 preview (root_path:str=<typer.models.OptionInfo object at 0x7f054acbd610>) CLI command for creating files for nbdev_mkdocs command #|output: asis #| echo: false show_doc(prepare) source {target=\"_blank\" style=\"float:right; font-size:smaller\"} prepare \u00a4 prepare (root_path:str=<typer.models.OptionInfo object at 0x7f054acbd550>) CLI command for creating files for nbdev_mkdocs command #|output: asis #| echo: false show_doc(new) source {target=\"_blank\" style=\"float:right; font-size:smaller\"} new \u00a4 new (root_path:str=<typer.models.OptionInfo object at 0x7f054acbd4c0>) CLI command for creating files for nbdev_mkdocs command result = runner.invoke(_app, [\"--help\"]) Usage: root [OPTIONS] COMMAND [ARGS]... \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --install-completion Install completion for the current shell. \u2502 \u2502 --show-completion Show completion for the current shell, to copy it or customize the installation. \u2502 \u2502 --help Show this message and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 new Creates files in **mkdocs** subdirectory needed for other **nbdev_mkdocs** subcommands \u2502 \u2502 prepare Prepares files in **mkdocs/docs** and then runs **mkdocs build** command on them \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f result = runner.invoke(_app, [\"new\", \"--help\"]) Usage: root new [OPTIONS] Creates files in **mkdocs** subdirectory needed for other **nbdev_mkdocs** subcommands \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --root-path TEXT [default: .] \u2502 \u2502 --help Show this message and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f result = runner.invoke(_app, [\"new\", \"--root-path=../setting.ini\"]) # result = runner.invoke(_app, [\"prepare\", \"--root-path=../setting.ini\"]) # assert result.exit_code == 1 # assert result.output == 'Unexpected internal error :/\\n'","title":"CLI"},{"location":"CLI/#preview","text":"preview (root_path:str=<typer.models.OptionInfo object at 0x7f054acbd610>) CLI command for creating files for nbdev_mkdocs command #|output: asis #| echo: false show_doc(prepare) source {target=\"_blank\" style=\"float:right; font-size:smaller\"}","title":"preview"},{"location":"CLI/#prepare","text":"prepare (root_path:str=<typer.models.OptionInfo object at 0x7f054acbd550>) CLI command for creating files for nbdev_mkdocs command #|output: asis #| echo: false show_doc(new) source {target=\"_blank\" style=\"float:right; font-size:smaller\"}","title":"prepare"},{"location":"CLI/#new","text":"new (root_path:str=<typer.models.OptionInfo object at 0x7f054acbd4c0>) CLI command for creating files for nbdev_mkdocs command result = runner.invoke(_app, [\"--help\"]) Usage: root [OPTIONS] COMMAND [ARGS]... \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --install-completion Install completion for the current shell. \u2502 \u2502 --show-completion Show completion for the current shell, to copy it or customize the installation. \u2502 \u2502 --help Show this message and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 new Creates files in **mkdocs** subdirectory needed for other **nbdev_mkdocs** subcommands \u2502 \u2502 prepare Prepares files in **mkdocs/docs** and then runs **mkdocs build** command on them \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f result = runner.invoke(_app, [\"new\", \"--help\"]) Usage: root new [OPTIONS] Creates files in **mkdocs** subdirectory needed for other **nbdev_mkdocs** subcommands \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --root-path TEXT [default: .] \u2502 \u2502 --help Show this message and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f result = runner.invoke(_app, [\"new\", \"--root-path=../setting.ini\"]) # result = runner.invoke(_app, [\"prepare\", \"--root-path=../setting.ini\"]) # assert result.exit_code == 1 # assert result.output == 'Unexpected internal error :/\\n'","title":"new"},{"location":"Docstring/","text":"import pytest import numpy as np logger.warning(\"xs\") WARNING:__main__:xs def f(i: str, *, a: int = 0): \"\"\"Very cool function **f** is a very cool function Args: i: something a: something else Example: The following snippet prints out greetings for two names: ```python print(\"hello {fill in name_1}\") print(\"goodbye {fill in name_2}\") ``` Example: Yet another example ```python password = {fill in password} print(f\"this is your password: {password}\") from nbdev_mkdocs.docstring import run_examples_from_docstring print(\"Logging in...\") ``` \"\"\" raise NotImplemented() def g(): \"\"\"Function Example: ```python from airt.helpers import print_header print(\"hello world\") ``` Example: ``` python from nbdev_mkdocs._package_data import get_root_data_path req_path = get_root_data_path() / \"requirements.txt\" print(f\"Path is: {req_path.resolve()}\") assert req_path.exists() ``` \"\"\" _extract_examples_from_docstring(g) ['\\nfrom airt.helpers import print_header\\n\\nprint(\"hello world\")\\n', '\\nfrom nbdev_mkdocs._package_data import get_root_data_path\\n\\nreq_path = get_root_data_path() / \"requirements.txt\"\\nprint(f\"Path is: {req_path.resolve()}\")\\nassert req_path.exists()\\n'] _extract_examples_from_docstring(f) ['\\nprint(\"hello {fill in name_1}\")\\nprint(\"goodbye {fill in name_2}\")\\n', '\\npassword = {fill in password}\\nprint(f\"this is your password: {password}\")\\n\\n\\nfrom nbdev_mkdocs.docstring import run_examples_from_docstring\\n\\nprint(\"Logging in...\")\\n'] expected = [ textwrap.dedent( \"\"\" print(\"hello {fill in name_1}\") print(\"goodbye {fill in name_2}\") \"\"\" ), textwrap.dedent( \"\"\" password = {fill in password} print(f\"this is your password: {password}\") from nbdev_mkdocs.docstring import run_examples_from_docstring print(\"Logging in...\") \"\"\" ), ] examples = _extract_examples_from_docstring(f) for example in examples: print(example) np.testing.assert_array_equal(examples, expected) print ( \"hello {fill in name_1}\" ) print ( \"goodbye {fill in name_2}\" ) password = { fill in password } print ( f\"this is your password: { password } \" ) from nbdev_mkdocs.docstring import run_examples_from_docstring print ( \"Logging in...\" ) examples[0] == expected[0] True expected = [\"name_1\", \"name_2\", \"password\"] keywords = _get_keywords(examples) np.testing.assert_array_equal(keywords, expected) expected = [ textwrap.dedent( \"\"\" print(\"hello davor\") print(\"goodbye kumaran\") \"\"\" ), textwrap.dedent( \"\"\" password = 'not_a_password' print(f\"this is your password: {password}\") from nbdev_mkdocs.docstring import run_examples_from_docstring print(\"Logging in...\") \"\"\" ), ] actual = _replace_keywords( examples, name_1=\"davor\", name_2=\"kumaran\", password=\"'not_a_password'\" ) for x in actual: print(x) np.testing.assert_array_equal(actual, expected) print ( \"hello davor\" ) print ( \"goodbye kumaran\" ) password = 'not_a_password' print ( f\"this is your password: { password } \" ) from nbdev_mkdocs.docstring import run_examples_from_docstring print ( \"Logging in...\" ) width = 80 console=Console(width=width) # panel = Panel( g = Group( Rule(\"Code\"), \"print(\\\"stuff\\\")\", _format_output( \"hello world and one more time world\", title=\"output\", width=width ), _format_output( \"hello world and one more time world\", title=\"output\", sub_dict={\"world\": \"*****\"}, width=width, ), _format_output( \"hello world and one more time world\", title=\"output\", sub_dict={\"world\": \"*****\"}, supress=True, width=width, ), )#, # title=\"Test: _format_output()\", # width=width # ) # console.print(panel) console.print(g) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 print ( \"stuff\" ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hello world and one more time world \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 output \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hello ***** and one more time ***** \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 output supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 N/A #|output: asis #| echo: false show_doc(run_examples_from_docstring) source {target=\"_blank\" style=\"float:right; font-size:smaller\"} run_examples_from_docstring \u00a4 run_examples_from_docstring (o:Any, supress_stdout:bool=False, supress_stderr:bool=False, sub_dict:Union[Dict[str,str],NoneType]=None, width:Union[int,NoneType]=80, **kwargs) Runs example from a docstring Parses docstring of an objects looking for examples. The examples are then saved into files and executed in a separate process. Note: Execution context is not the same as the one in the notebook because we want examples to work from user code. Make sure you compiled the library prior to executing the examples, otherwise you might be running them agains an old version of the library. Args: o: an object, typically a function or a class, for which docstring is being parsed for examples supress_stdout: omit stdout from output, typically due to security considerations supress_stderr: omit stderr from output, typically due to security considerations sub_dict: a dictionary mapping regexp patterns into replacement strings used to mask stdout and stderr, typically used to mask sensitive information such as passwords **kwargs: arguments use to replace \"{fill in **param**}\" in docstring with the actual values when running examples Raises: ValueError: if some params are missing from the kwargs RuntimeException: if example fails Example: from nbdev_mkdocs.docstring import run_examples_from_docstring def f (): ``` python Example : print ( \"Hello {fill in name}!\" ) print ( \"Goodbye {fill in other_name}!\" ) ``` pass run_examples_from_docstring ( f , name = \"John\" , other_name = \"Jane\" ) print(run_examples_from_docstring.__doc__) Runs example from a docstring Parses docstring of an objects looking for examples. The examples are then saved into files and executed in a separate process. Note: Execution context is not the same as the one in the notebook because we want examples to work from user code. Make sure you compiled the library prior to executing the examples, otherwise you might be running them agains an old version of the library. Args: o: an object, typically a function or a class, for which docstring is being parsed for examples supress_stdout: omit stdout from output, typically due to security considerations supress_stderr: omit stderr from output, typically due to security considerations sub_dict: a dictionary mapping regexp patterns into replacement strings used to mask stdout and stderr, typically used to mask sensitive information such as passwords **kwargs: arguments use to replace \"{fill in **param**}\" in docstring with the actual values when running examples Raises: ValueError: if some params are missing from the **kwargs** RuntimeException: if example fails Example: from nbdev_mkdocs.docstring import run_examples_from_docstring def < span style = \"color: #800080; text-decoration-color: #800080; font-weight: bold\" > f </ span >< span style = \"font-weight: bold\" > () </ span > : ``` python Example : < span style = \"color: #800080; text-decoration-color: #800080; font-weight: bold\" > print </ span >< span style = \"font-weight: bold\" > ( </ span >< span style = \"color: #008000; text-decoration-color: #008000\" > \"Hello {fill in name}!\" </ span >< span style = \"font-weight: bold\" > ) </ span > < span style = \"color: #800080; text-decoration-color: #800080; font-weight: bold\" > print </ span >< span style = \"font-weight: bold\" > ( </ span >< span style = \"color: #008000; text-decoration-color: #008000\" > \"Goodbye {fill in other_name}!\" </ span >< span style = \"font-weight: bold\" > ) </ span > ``` pass < span style = \"color: #800080; text-decoration-color: #800080; font-weight: bold\" > run_examples_from_docstring </ span >< span style = \"font-weight: bold\" > ( </ span > f , < span style = \"color: #808000; text-decoration-color: #808000\" > name </ span >=< span style = \"color: #008000; text-decoration-color: #008000\" > \"John\" </ span > , < span style = \"color: #808000; text-decoration-color: #808000\" > other_name </ span >=< span style = \"color: #008000; text-decoration-color: #008000\" > \"Jane\" </ span >< span style = \"font-weight: bold\" > ) </ span > examples = _extract_examples_from_docstring(run_examples_from_docstring) console = Console(width=80) console.print(Panel(examples[0])) ERROR:griffe.agents.nodes:Failed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve' ERROR:griffe.agents.nodes:Failed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve' \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 from nbdev_mkdocs.docstring import run_examples_from_docstring \u2502 \u2502 \u2502 \u2502 def f(): \u2502 \u2502 ```python \u2502 \u2502 Example: \u2502 \u2502 print(\"Hello {fill in name}!\") \u2502 \u2502 print(\"Goodbye {fill in other_name}!\") \u2502 \u2502 ``` \u2502 \u2502 pass \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 run_examples_from_docstring(f, name=\"John\", other_name=\"Jane\") \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f run_examples_from_docstring( f, name_1=\"davor\", name_2=\"all\", password='\"zeko\"', supress_stderr=True, sub_dict={\"zeko\": \"*\" * 12}, ) Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 print ( \"hello {fill in name_1}\" ) print ( \"goodbye {fill in name_2}\" ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hello davor goodbye all \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 N/A Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 password = { fill in password } print ( f\"this is your password: { password } \" ) from nbdev_mkdocs.docstring import run_examples_from_docstring print ( \"Logging in...\" ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 this is your password: ************ Logging in ... \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 N/A with pytest.raises(ValueError) as e: run_examples_from_docstring(f, name_1=\"davor\") e.value ValueError(\"{'password', 'name_1', 'name_2'} > {'name_1'}\") class C: \"\"\"Cool class with broken example Example: ```python from nbdev_mkdocs.docstring import run_examples_from_docstring raise NotImplementedError(\"expected to fail\") ``` \"\"\" pass with pytest.raises(RuntimeError) as e: run_examples_from_docstring(C) e.value Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 from nbdev_mkdocs.docstring import run_examples_from_docstring raise NotImplementedError ( \"expected to fail\" ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback ( most recent call last ) : File \"/tmp/tmpz_aj2hdf/example.py\" , line 4 , in < module > raise NotImplementedError ( \"expected to fail\" ) NotImplementedError: expected to fail RuntimeError('Traceback (most recent call last):\\n File \"/tmp/tmpz_aj2hdf/example.py\", line 4, in <module>\\n raise NotImplementedError(\"expected to fail\")\\nNotImplementedError: expected to fail\\n') from nbdev_mkdocs._package_data import get_root_data_path print(get_root_data_path.__doc__) Returns path to package_data in lib Example: ``` python from nbdev_mkdocs._package_data import get_root_data_path req_path = get_root_data_path() / \"requirements.txt\" print(f\"Path is: {req_path.resolve()}\") assert req_path.exists() ``` _extract_examples_from_docstring(get_root_data_path) ['\\nfrom nbdev_mkdocs.package_data import get_root_data_path\\n\\nreq_path = get_root_data_path() / \"requirements.txt\"\\nprint(f\"Path is: {req_path.resolve()}\")\\nassert req_path.exists()\\n\\n']","title":"Docstring helpers"},{"location":"Docstring/#run_examples_from_docstring","text":"run_examples_from_docstring (o:Any, supress_stdout:bool=False, supress_stderr:bool=False, sub_dict:Union[Dict[str,str],NoneType]=None, width:Union[int,NoneType]=80, **kwargs) Runs example from a docstring Parses docstring of an objects looking for examples. The examples are then saved into files and executed in a separate process. Note: Execution context is not the same as the one in the notebook because we want examples to work from user code. Make sure you compiled the library prior to executing the examples, otherwise you might be running them agains an old version of the library. Args: o: an object, typically a function or a class, for which docstring is being parsed for examples supress_stdout: omit stdout from output, typically due to security considerations supress_stderr: omit stderr from output, typically due to security considerations sub_dict: a dictionary mapping regexp patterns into replacement strings used to mask stdout and stderr, typically used to mask sensitive information such as passwords **kwargs: arguments use to replace \"{fill in **param**}\" in docstring with the actual values when running examples Raises: ValueError: if some params are missing from the kwargs RuntimeException: if example fails Example: from nbdev_mkdocs.docstring import run_examples_from_docstring def f (): ``` python Example : print ( \"Hello {fill in name}!\" ) print ( \"Goodbye {fill in other_name}!\" ) ``` pass run_examples_from_docstring ( f , name = \"John\" , other_name = \"Jane\" ) print(run_examples_from_docstring.__doc__) Runs example from a docstring Parses docstring of an objects looking for examples. The examples are then saved into files and executed in a separate process. Note: Execution context is not the same as the one in the notebook because we want examples to work from user code. Make sure you compiled the library prior to executing the examples, otherwise you might be running them agains an old version of the library. Args: o: an object, typically a function or a class, for which docstring is being parsed for examples supress_stdout: omit stdout from output, typically due to security considerations supress_stderr: omit stderr from output, typically due to security considerations sub_dict: a dictionary mapping regexp patterns into replacement strings used to mask stdout and stderr, typically used to mask sensitive information such as passwords **kwargs: arguments use to replace \"{fill in **param**}\" in docstring with the actual values when running examples Raises: ValueError: if some params are missing from the **kwargs** RuntimeException: if example fails Example: from nbdev_mkdocs.docstring import run_examples_from_docstring def < span style = \"color: #800080; text-decoration-color: #800080; font-weight: bold\" > f </ span >< span style = \"font-weight: bold\" > () </ span > : ``` python Example : < span style = \"color: #800080; text-decoration-color: #800080; font-weight: bold\" > print </ span >< span style = \"font-weight: bold\" > ( </ span >< span style = \"color: #008000; text-decoration-color: #008000\" > \"Hello {fill in name}!\" </ span >< span style = \"font-weight: bold\" > ) </ span > < span style = \"color: #800080; text-decoration-color: #800080; font-weight: bold\" > print </ span >< span style = \"font-weight: bold\" > ( </ span >< span style = \"color: #008000; text-decoration-color: #008000\" > \"Goodbye {fill in other_name}!\" </ span >< span style = \"font-weight: bold\" > ) </ span > ``` pass < span style = \"color: #800080; text-decoration-color: #800080; font-weight: bold\" > run_examples_from_docstring </ span >< span style = \"font-weight: bold\" > ( </ span > f , < span style = \"color: #808000; text-decoration-color: #808000\" > name </ span >=< span style = \"color: #008000; text-decoration-color: #008000\" > \"John\" </ span > , < span style = \"color: #808000; text-decoration-color: #808000\" > other_name </ span >=< span style = \"color: #008000; text-decoration-color: #008000\" > \"Jane\" </ span >< span style = \"font-weight: bold\" > ) </ span > examples = _extract_examples_from_docstring(run_examples_from_docstring) console = Console(width=80) console.print(Panel(examples[0])) ERROR:griffe.agents.nodes:Failed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve' ERROR:griffe.agents.nodes:Failed to parse annotation from 'Name' node: 'NoneType' object has no attribute 'resolve' \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 \u2502 \u2502 from nbdev_mkdocs.docstring import run_examples_from_docstring \u2502 \u2502 \u2502 \u2502 def f(): \u2502 \u2502 ```python \u2502 \u2502 Example: \u2502 \u2502 print(\"Hello {fill in name}!\") \u2502 \u2502 print(\"Goodbye {fill in other_name}!\") \u2502 \u2502 ``` \u2502 \u2502 pass \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 run_examples_from_docstring(f, name=\"John\", other_name=\"Jane\") \u2502 \u2502 \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f run_examples_from_docstring( f, name_1=\"davor\", name_2=\"all\", password='\"zeko\"', supress_stderr=True, sub_dict={\"zeko\": \"*\" * 12}, ) Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 print ( \"hello {fill in name_1}\" ) print ( \"goodbye {fill in name_2}\" ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hello davor goodbye all \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 N/A Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 password = { fill in password } print ( f\"this is your password: { password } \" ) from nbdev_mkdocs.docstring import run_examples_from_docstring print ( \"Logging in...\" ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 this is your password: ************ Logging in ... \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 N/A with pytest.raises(ValueError) as e: run_examples_from_docstring(f, name_1=\"davor\") e.value ValueError(\"{'password', 'name_1', 'name_2'} > {'name_1'}\") class C: \"\"\"Cool class with broken example Example: ```python from nbdev_mkdocs.docstring import run_examples_from_docstring raise NotImplementedError(\"expected to fail\") ``` \"\"\" pass with pytest.raises(RuntimeError) as e: run_examples_from_docstring(C) e.value Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 from nbdev_mkdocs.docstring import run_examples_from_docstring raise NotImplementedError ( \"expected to fail\" ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback ( most recent call last ) : File \"/tmp/tmpz_aj2hdf/example.py\" , line 4 , in < module > raise NotImplementedError ( \"expected to fail\" ) NotImplementedError: expected to fail RuntimeError('Traceback (most recent call last):\\n File \"/tmp/tmpz_aj2hdf/example.py\", line 4, in <module>\\n raise NotImplementedError(\"expected to fail\")\\nNotImplementedError: expected to fail\\n') from nbdev_mkdocs._package_data import get_root_data_path print(get_root_data_path.__doc__) Returns path to package_data in lib Example: ``` python from nbdev_mkdocs._package_data import get_root_data_path req_path = get_root_data_path() / \"requirements.txt\" print(f\"Path is: {req_path.resolve()}\") assert req_path.exists() ``` _extract_examples_from_docstring(get_root_data_path) ['\\nfrom nbdev_mkdocs.package_data import get_root_data_path\\n\\nreq_path = get_root_data_path() / \"requirements.txt\"\\nprint(f\"Path is: {req_path.resolve()}\")\\nassert req_path.exists()\\n\\n']","title":"run_examples_from_docstring"},{"location":"Mkdocs/","text":"import pytest import numpy as np from tempfile import TemporaryDirectory import yaml Create new \u00a4 Add requirements to settings \u00a4 with TemporaryDirectory() as d: shutil.copyfile(Path(\"..\") / \"settings.ini\", Path(d) / \"settings.ini\") updater = ConfigUpdater() updater.read(Path(d) / \"settings.ini\") updater[\"DEFAULT\"][\"requirements\"] = Option( key=\"requirements\", value=\"\\\\\\n nbdev>=2.3.7 \\\\\\n typer[all]==0.6.1\" ) updater.update_file() assert \"mkdocs\" not in updater[\"DEFAULT\"][\"requirements\"].value # testing adding requirements _add_requirements_to_settings(d) updater = ConfigUpdater() updater.read(Path(d) / \"settings.ini\") founded = re.findall(\"mkdocs[\\w_\\-\\[\\]]*\", updater[\"DEFAULT\"][\"requirements\"].value) assert len(founded) == 5, founded # do nothin if the requirements are already added _add_requirements_to_settings(d) updater = ConfigUpdater() updater.read(Path(d) / \"settings.ini\") founded = re.findall(\"mkdocs[\\w_\\-\\[\\]]*\", updater[\"DEFAULT\"][\"requirements\"].value) assert len(founded) == 5, founded print(updater) Requirements added to '/tmp/tmpox0d8w7h/settings.ini'. Requirements already added to '/tmp/tmpox0d8w7h/settings.ini'. [DEFAULT] # All sections below are required unless otherwise specified. # See https://github.com/fastai/nbdev/blob/master/settings.ini for examples. ### Python library ### repo = nbdev-mkdocs lib_name = %(repo)s version = 0.0.1rc0 min_python = 3.7 license = apache2 ### nbdev ### doc_path = _docs lib_path = nbdev_mkdocs nbs_path = nbs recursive = True tst_flags = notest put_version_in_init = True black_formatting = True ### Docs ### branch = main custom_sidebar = False doc_host = https://%(user)s.github.io doc_baseurl = /%(repo)s git_url = https://github.com/%(user)s/%(repo)s title = %(lib_name)s ### PyPI ### audience = Developers author = airt author_email = info@airt.ai copyright = 2022 onwards, %(author)s description = Extension of nbdev for generating documentation using Material for Mkdocs instead of Quarto keywords = nbdev jupyter notebook python mkdocs material language = English status = 3 user = airtai ### Optional ### requirements = \\ nbdev>=2.3.7 \\ typer[all]==0.6.1 \\ mkdocs==1.3.0 \\ mkdocstrings==0.18.1 \\ mkdocs-material==8.2.14 \\ mkdocs-literate-nav==0.4.1 \\ mkdocs-section-index==0.3.4 \\ configupdater==3.1.1 \\ griffe==0.22.2 \\ nbconvert==7.0.0 dev_requirements = \\ bandit>=1.7.4 \\ semgrep>=0.115.0 \\ pytest>=7.1.3 \\ numpy>=1.0 console_scripts = nbdev_mkdocs=nbdev_mkdocs.cli:_app Create mkdocs dir \u00a4 with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) _create_mkdocs_dir(d) print(\"\\n\".join([str(p) for p in (Path(d) / \"mkdocs\").glob(\"**/*\")])) Directory /tmp/tmp7pveq4sk/mkdocs created. /tmp/tmp7pveq4sk/mkdocs/overrides /tmp/tmp7pveq4sk/mkdocs/site /tmp/tmp7pveq4sk/mkdocs/overrides/main.html /tmp/tmp7pveq4sk/mkdocs/site/stylesheets /tmp/tmp7pveq4sk/mkdocs/site/images /tmp/tmp7pveq4sk/mkdocs/site/javascripts /tmp/tmp7pveq4sk/mkdocs/site/assets /tmp/tmp7pveq4sk/mkdocs/site/404.html /tmp/tmp7pveq4sk/mkdocs/site/stylesheets/extra.css /tmp/tmp7pveq4sk/mkdocs/site/images/favicon.ico /tmp/tmp7pveq4sk/mkdocs/site/javascripts/extra.js /tmp/tmp7pveq4sk/mkdocs/site/assets/stylesheets /tmp/tmp7pveq4sk/mkdocs/site/assets/images /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts /tmp/tmp7pveq4sk/mkdocs/site/assets/_mkdocstrings.css /tmp/tmp7pveq4sk/mkdocs/site/assets/stylesheets/main.3de6f41f.min.css /tmp/tmp7pveq4sk/mkdocs/site/assets/stylesheets/palette.cc9b2e1e.min.css.map /tmp/tmp7pveq4sk/mkdocs/site/assets/stylesheets/main.3de6f41f.min.css.map /tmp/tmp7pveq4sk/mkdocs/site/assets/stylesheets/palette.cc9b2e1e.min.css /tmp/tmp7pveq4sk/mkdocs/site/assets/images/favicon.png /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/workers /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/bundle.c2e1ee47.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/bundle.c2e1ee47.min.js.map /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/workers/search.2a1c317c.min.js.map /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/workers/search.2a1c317c.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/wordcut.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/tinyseg.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.ro.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.pt.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.sv.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.ja.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.stemmer.support.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.hu.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.multi.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.ru.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.jp.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.es.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.no.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.it.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.ar.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.fr.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.zh.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.nl.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.hi.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.fi.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.de.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.da.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.tr.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.th.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.du.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.vi.min.js Create Mkdocs.yml \u00a4 assert _mkdocs_template_path.exists() print(_mkdocs_template) # Site site_name: {title} site_url: {doc_host}{doc_baseurl} site_author: {author} site_description: {description} # Repository repo_name: {repo} repo_url: {git_url} edit_uri: \"\" copyright: {copyright} docs_dir: docs site_dir: site plugins: - literate-nav: nav_file: SUMMARY.md - search - mkdocstrings: handlers: python: import: - https://docs.python.org/3/objects.inv options: heading_level: 2 show_category_heading: true show_root_heading: true show_root_toc_entry: true show_signature_annotations: true show_if_no_docstring: true markdown_extensions: - pymdownx.arithmatex: generic: true - pymdownx.inlinehilite - pymdownx.details - pymdownx.emoji - pymdownx.magiclink - pymdownx.superfences - pymdownx.tasklist - pymdownx.highlight: linenums: false - pymdownx.snippets: check_paths: true - pymdownx.tabbed: alternate_style: true - admonition - toc: permalink: \"\u00a4\" # - callouts theme: name: material custom_dir: overrides features: - navigation.instant - navigation.tabs - navigation.tabs.sticky # - navigation.sections # - navigation.expand - navigation.indexes - navigation.top # - toc.integrates - search.suggest - search.highlight - search.share palette: - scheme: slate primary: black accent: yellow toggle: icon: material/toggle-switch name: Switch to light mode - scheme: default primary: black # deep orange accent: red toggle: icon: material/toggle-switch-off-outline name: Switch to dark mode icon: repo: fontawesome/brands/github # repo: fontawesome/brands/gitlab logo: material/compass-outline # admonition: # <type>: <icon> favicon: images/favicon.ico extra_css: - stylesheets/extra.css extra_javascript: - javascripts/extra.js - javascripts/mathjax.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) kwargs = _get_kwargs_from_settings(settings_path) actual = _mkdocs_template.format(**kwargs) kwargs {'title': 'nbdev-mkdocs', 'doc_host': 'https://airtai.github.io', 'doc_baseurl': '/nbdev-mkdocs', 'author': 'airt', 'description': 'Extension of nbdev for generating documentation using Material for Mkdocs instead of Quarto', 'repo': 'nbdev-mkdocs', 'git_url': 'https://github.com/airtai/nbdev-mkdocs', 'copyright': '2022 onwards, airt'} with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) _create_mkdocs_yaml(d) with open(Path(d) / \"mkdocs/mkdocs.yml\") as f: y = yaml.safe_load(f) y File '/tmp/tmpuq7ru08i/mkdocs/mkdocs.yml' generated. {'site_name': 'nbdev-mkdocs', 'site_url': 'https://airtai.github.io/nbdev-mkdocs', 'site_author': 'airt', 'site_description': 'Extension of nbdev for generating documentation using Material for Mkdocs instead of Quarto', 'repo_name': 'nbdev-mkdocs', 'repo_url': 'https://github.com/airtai/nbdev-mkdocs', 'edit_uri': '', 'copyright': '2022 onwards, airt', 'docs_dir': 'docs', 'site_dir': 'site', 'plugins': [{'literate-nav': {'nav_file': 'SUMMARY.md'}}, 'search', {'mkdocstrings': {'handlers': {'python': {'import': ['https://docs.python.org/3/objects.inv'], 'options': {'heading_level': 2, 'show_category_heading': True, 'show_root_heading': True, 'show_root_toc_entry': True, 'show_signature_annotations': True, 'show_if_no_docstring': True}}}}}], 'markdown_extensions': [{'pymdownx.arithmatex': {'generic': True}}, 'pymdownx.inlinehilite', 'pymdownx.details', 'pymdownx.emoji', 'pymdownx.magiclink', 'pymdownx.superfences', 'pymdownx.tasklist', {'pymdownx.highlight': {'linenums': False}}, {'pymdownx.snippets': {'check_paths': True}}, {'pymdownx.tabbed': {'alternate_style': True}}, 'admonition', {'toc': {'permalink': '\u00a4'}}], 'theme': {'name': 'material', 'custom_dir': 'overrides', 'features': ['navigation.instant', 'navigation.tabs', 'navigation.tabs.sticky', 'navigation.indexes', 'navigation.top', 'search.suggest', 'search.highlight', 'search.share'], 'palette': [{'scheme': 'slate', 'primary': 'black', 'accent': 'yellow', 'toggle': {'icon': 'material/toggle-switch', 'name': 'Switch to light mode'}}, {'scheme': 'default', 'primary': 'black', 'accent': 'red', 'toggle': {'icon': 'material/toggle-switch-off-outline', 'name': 'Switch to dark mode'}}], 'icon': {'repo': 'fontawesome/brands/github', 'logo': 'material/compass-outline'}, 'favicon': 'images/favicon.ico'}, 'extra_css': ['stylesheets/extra.css'], 'extra_javascript': ['javascripts/extra.js', 'javascripts/mathjax.js', 'https://polyfill.io/v3/polyfill.min.js?features=es6', 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js']} Create summary_template.txt \u00a4 with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) _create_mkdocs_yaml(d) _create_summary_template(d) guides = \"\"\"- Guides - [Guide one](docs/guide_1.md)\"\"\" api = \"\"\"- API - [numpy.array](api/numpy/array.md)\"\"\" cli = \"\"\"- CLI - [my-cli](cli/my_cli.md)\"\"\" with open(Path(d) / \"mkdocs/summary_template.txt\") as f: summary_template = f.read() summary = summary_template.format(guides=guides, api=api, cli=cli) # y = yaml.safe_load(summary) print(summary) File '/tmp/tmping37xcf/mkdocs/mkdocs.yml' generated. File '/tmp/tmping37xcf/mkdocs/summary_template.txt' generated. - [Home](index.md) - Guides - [Guide one](docs/guide_1.md) - API - [numpy.array](api/numpy/array.md) - CLI - [my-cli](cli/my_cli.md) Bringing it all together \u00a4 #|output: asis #| echo: false show_doc(new) source {target=\"_blank\" style=\"float:right; font-size:smaller\"} new \u00a4 new (root_path:str) Initialize mkdocs project files Creates mkdocs directory in the root_path directory and populates it with initial values. You should edit mkdocs.yml file to customize it if needed. Params: root_path: path under which mkdocs directory will be created with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) new(d) mkdocs_path = Path(d) / \"mkdocs\" assert settings_path.exists() assert mkdocs_path.exists() assert (mkdocs_path / \"mkdocs.yml\").exists() assert (mkdocs_path / \"overrides\" / \"main.html\").exists() assert (mkdocs_path / \"site\").exists() assert (mkdocs_path / \"summary_template.txt\").exists() Requirements already added to '/tmp/tmpl_krgmvp/settings.ini'. Directory /tmp/tmpl_krgmvp/mkdocs created. File '/tmp/tmpl_krgmvp/mkdocs/mkdocs.yml' generated. File '/tmp/tmpl_krgmvp/mkdocs/summary_template.txt' generated. Build \u00a4 Build markdown files \u00a4 (Path(\"/tmp\") / \"/\" / \"///////console.html\").resolve() Path('/console.html') !ls /tmp fish.davor/ tmp2imt9_a__kernels/ tmpocn0mm0j.less fish.root/ tmpmw7n5cwp.less with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) new(d) _generate_markdown_from_nbs(root_path=d) # check markdown files print(\"Checks:\") mds = list((Path(d)/\"mkdocs\"/\"docs\").glob(\"**/*.md\")) print(\"\\n\".join([str(md) for md in mds])) assert len(mds) == 6 Requirements already added to '/tmp/tmpoketlbwi/settings.ini'. Directory /tmp/tmpoketlbwi/mkdocs created. File '/tmp/tmpoketlbwi/mkdocs/mkdocs.yml' generated. File '/tmp/tmpoketlbwi/mkdocs/summary_template.txt' generated. cache=Path('/tf/nbdev-mkdocs/_proc') notebooks=[Path('/tf/nbdev-mkdocs/_proc/index.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Mkdocs.ipynb'), Path('/tf/nbdev-mkdocs/_proc/CLI.ipynb'), Path('/tf/nbdev-mkdocs/_proc/PackageData.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Docstring.ipynb'), Path('/tf/nbdev-mkdocs/_proc/guides/Guide_One.ipynb')] File '/tmp/tmpoketlbwi/mkdocs/docs/index.md' created. File '/tmp/tmpoketlbwi/mkdocs/docs/Mkdocs.md' created. File '/tmp/tmpoketlbwi/mkdocs/docs/CLI.md' created. File '/tmp/tmpoketlbwi/mkdocs/docs/PackageData.md' created. File '/tmp/tmpoketlbwi/mkdocs/docs/Docstring.md' created. File '/tmp/tmpoketlbwi/mkdocs/docs/guides/Guide_One.md' created. Checks: /tmp/tmpoketlbwi/mkdocs/docs/CLI.md /tmp/tmpoketlbwi/mkdocs/docs/PackageData.md /tmp/tmpoketlbwi/mkdocs/docs/Docstring.md /tmp/tmpoketlbwi/mkdocs/docs/index.md /tmp/tmpoketlbwi/mkdocs/docs/Mkdocs.md /tmp/tmpoketlbwi/mkdocs/docs/guides/Guide_One.md /usr/local/lib/python3.8/dist-packages/nbformat/__init__.py:92: MissingIDFieldWarning: Code cell is missing an id field, this will become a hard error in future nbformat versions. You may want to use `normalize()` on your notebooks before validations (available since nbformat 5.1.4). Previous versions of nbformat are fixing this issue transparently, and will stop doing so in the future. validate(nb) Build summary for guides \u00a4 with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) new(d) _generate_markdown_from_nbs(root_path=d) guides = _generate_summary_for_guides(root_path=d) print(guides) Requirements already added to '/tmp/tmpdpcbqc69/settings.ini'. Directory /tmp/tmpdpcbqc69/mkdocs created. File '/tmp/tmpdpcbqc69/mkdocs/mkdocs.yml' generated. File '/tmp/tmpdpcbqc69/mkdocs/summary_template.txt' generated. cache=Path('/tf/nbdev-mkdocs/_proc') notebooks=[Path('/tf/nbdev-mkdocs/_proc/index.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Mkdocs.ipynb'), Path('/tf/nbdev-mkdocs/_proc/CLI.ipynb'), Path('/tf/nbdev-mkdocs/_proc/PackageData.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Docstring.ipynb'), Path('/tf/nbdev-mkdocs/_proc/guides/Guide_One.ipynb')] File '/tmp/tmpdpcbqc69/mkdocs/docs/index.md' created. File '/tmp/tmpdpcbqc69/mkdocs/docs/Mkdocs.md' created. File '/tmp/tmpdpcbqc69/mkdocs/docs/CLI.md' created. File '/tmp/tmpdpcbqc69/mkdocs/docs/PackageData.md' created. File '/tmp/tmpdpcbqc69/mkdocs/docs/Docstring.md' created. File '/tmp/tmpdpcbqc69/mkdocs/docs/guides/Guide_One.md' created. - Guides - [Guide One](guides/Guide_One.md) Build API \u00a4 #|output: asis #| echo: false show_doc(get_submodules) source {target=\"_blank\" style=\"float:right; font-size:smaller\"} get_submodules \u00a4 get_submodules (package_name:str) submodules = get_submodules(\"mkdocs\") submodules ['mkdocs.commands', 'mkdocs.commands.babel', 'mkdocs.commands.build', 'mkdocs.commands.gh_deploy', 'mkdocs.commands.new', 'mkdocs.commands.serve', 'mkdocs.commands.setup', 'mkdocs.config', 'mkdocs.config.base', 'mkdocs.config.config_options', 'mkdocs.config.defaults', 'mkdocs.contrib', 'mkdocs.contrib.search', 'mkdocs.contrib.search.search_index', 'mkdocs.exceptions', 'mkdocs.livereload', 'mkdocs.localization', 'mkdocs.plugins', 'mkdocs.structure', 'mkdocs.structure.files', 'mkdocs.structure.nav', 'mkdocs.structure.pages', 'mkdocs.structure.toc', 'mkdocs.tests', 'mkdocs.tests.babel_cmd_tests', 'mkdocs.tests.base', 'mkdocs.tests.build_tests', 'mkdocs.tests.cli_tests', 'mkdocs.tests.config', 'mkdocs.tests.config.base_tests', 'mkdocs.tests.config.config_options_tests', 'mkdocs.tests.config.config_tests', 'mkdocs.tests.gh_deploy_tests', 'mkdocs.tests.integration', 'mkdocs.tests.livereload_tests', 'mkdocs.tests.localization_tests', 'mkdocs.tests.new_tests', 'mkdocs.tests.plugin_tests', 'mkdocs.tests.search_tests', 'mkdocs.tests.structure', 'mkdocs.tests.structure.file_tests', 'mkdocs.tests.structure.nav_tests', 'mkdocs.tests.structure.page_tests', 'mkdocs.tests.structure.toc_tests', 'mkdocs.tests.theme_tests', 'mkdocs.tests.utils', 'mkdocs.tests.utils.babel_stub_tests', 'mkdocs.tests.utils.utils_tests', 'mkdocs.theme', 'mkdocs.themes', 'mkdocs.themes.mkdocs', 'mkdocs.themes.readthedocs', 'mkdocs.utils', 'mkdocs.utils.babel_stub', 'mkdocs.utils.filters', 'mkdocs.utils.meta'] #|output: asis #| echo: false show_doc(generate_api_docs_for_module) source {target=\"_blank\" style=\"float:right; font-size:smaller\"} generate_api_docs_for_module \u00a4 generate_api_docs_for_module (root_path:str, module_name:str) #|output: asis #| echo: false show_doc(generate_api_doc_for_submodule) source {target=\"_blank\" style=\"float:right; font-size:smaller\"} generate_api_doc_for_submodule \u00a4 generate_api_doc_for_submodule (root_path:str, submodule:str) with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) new(d) api_summary = generate_api_docs_for_module(d, \"mkdocs\") print(api_summary) # make sure all paths exist paths = re.findall(\"\\(.*?\\)\", api_summary) paths = [Path(d) / \"mkdocs/docs\" / x[1:-1] for x in paths] for path in paths: assert path.exists(), path Requirements already added to '/tmp/tmpn84hj2w_/settings.ini'. Directory /tmp/tmpn84hj2w_/mkdocs created. File '/tmp/tmpn84hj2w_/mkdocs/mkdocs.yml' generated. File '/tmp/tmpn84hj2w_/mkdocs/summary_template.txt' generated. - API - [mkdocs.commands](API/mkdocs/commands.md) - [babel](API/mkdocs/commands/babel.md) - [build](API/mkdocs/commands/build.md) - [gh_deploy](API/mkdocs/commands/gh_deploy.md) - [new](API/mkdocs/commands/new.md) - [serve](API/mkdocs/commands/serve.md) - [setup](API/mkdocs/commands/setup.md) - [mkdocs.config](API/mkdocs/config.md) - [base](API/mkdocs/config/base.md) - [config_options](API/mkdocs/config/config_options.md) - [defaults](API/mkdocs/config/defaults.md) - [mkdocs.contrib](API/mkdocs/contrib.md) - [search](API/mkdocs/contrib/search.md) - [search_index](API/mkdocs/contrib/search/search_index.md) - [mkdocs.exceptions](API/mkdocs/exceptions.md) - [mkdocs.livereload](API/mkdocs/livereload.md) - [mkdocs.localization](API/mkdocs/localization.md) - [mkdocs.plugins](API/mkdocs/plugins.md) - [mkdocs.structure](API/mkdocs/structure.md) - [files](API/mkdocs/structure/files.md) - [nav](API/mkdocs/structure/nav.md) - [pages](API/mkdocs/structure/pages.md) - [toc](API/mkdocs/structure/toc.md) - [mkdocs.tests](API/mkdocs/tests.md) - [babel_cmd_tests](API/mkdocs/tests/babel_cmd_tests.md) - [base](API/mkdocs/tests/base.md) - [build_tests](API/mkdocs/tests/build_tests.md) - [cli_tests](API/mkdocs/tests/cli_tests.md) - [config](API/mkdocs/tests/config.md) - [base_tests](API/mkdocs/tests/config/base_tests.md) - [config_options_tests](API/mkdocs/tests/config/config_options_tests.md) - [config_tests](API/mkdocs/tests/config/config_tests.md) - [gh_deploy_tests](API/mkdocs/tests/gh_deploy_tests.md) - [integration](API/mkdocs/tests/integration.md) - [livereload_tests](API/mkdocs/tests/livereload_tests.md) - [localization_tests](API/mkdocs/tests/localization_tests.md) - [new_tests](API/mkdocs/tests/new_tests.md) - [plugin_tests](API/mkdocs/tests/plugin_tests.md) - [search_tests](API/mkdocs/tests/search_tests.md) - [structure](API/mkdocs/tests/structure.md) - [file_tests](API/mkdocs/tests/structure/file_tests.md) - [nav_tests](API/mkdocs/tests/structure/nav_tests.md) - [page_tests](API/mkdocs/tests/structure/page_tests.md) - [toc_tests](API/mkdocs/tests/structure/toc_tests.md) - [theme_tests](API/mkdocs/tests/theme_tests.md) - [utils](API/mkdocs/tests/utils.md) - [babel_stub_tests](API/mkdocs/tests/utils/babel_stub_tests.md) - [utils_tests](API/mkdocs/tests/utils/utils_tests.md) - [mkdocs.theme](API/mkdocs/theme.md) - [mkdocs.themes](API/mkdocs/themes.md) - [mkdocs](API/mkdocs/themes/mkdocs.md) - [readthedocs](API/mkdocs/themes/readthedocs.md) - [mkdocs.utils](API/mkdocs/utils.md) - [babel_stub](API/mkdocs/utils/babel_stub.md) - [filters](API/mkdocs/utils/filters.md) - [meta](API/mkdocs/utils/meta.md) Brining it all together \u00a4 #|output: asis #| echo: false show_doc(build_summary) source {target=\"_blank\" style=\"float:right; font-size:smaller\"} build_summary \u00a4 build_summary (root_path:str, module:str) with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" for fname in [\"settings.ini\", \"README.md\"]: shutil.copyfile(Path(\"..\") / fname, Path(d) / fname) new(d) build_summary(d, \"mkdocs\") with open(Path(d) / \"mkdocs/docs/SUMMARY.md\") as f: summary = f.read() print(summary) Requirements already added to '/tmp/tmpetk8k_o9/settings.ini'. Directory /tmp/tmpetk8k_o9/mkdocs created. File '/tmp/tmpetk8k_o9/mkdocs/mkdocs.yml' generated. File '/tmp/tmpetk8k_o9/mkdocs/summary_template.txt' generated. cache=Path('/tf/nbdev-mkdocs/_proc') notebooks=[Path('/tf/nbdev-mkdocs/_proc/index.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Mkdocs.ipynb'), Path('/tf/nbdev-mkdocs/_proc/CLI.ipynb'), Path('/tf/nbdev-mkdocs/_proc/PackageData.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Docstring.ipynb'), Path('/tf/nbdev-mkdocs/_proc/guides/Guide_One.ipynb')] File '/tmp/tmpetk8k_o9/mkdocs/docs/index.md' created. File '/tmp/tmpetk8k_o9/mkdocs/docs/Mkdocs.md' created. File '/tmp/tmpetk8k_o9/mkdocs/docs/CLI.md' created. File '/tmp/tmpetk8k_o9/mkdocs/docs/PackageData.md' created. File '/tmp/tmpetk8k_o9/mkdocs/docs/Docstring.md' created. File '/tmp/tmpetk8k_o9/mkdocs/docs/guides/Guide_One.md' created. - [Home](index.md) - Guides - [Guide One](guides/Guide_One.md) - API - [mkdocs.commands](API/mkdocs/commands.md) - [babel](API/mkdocs/commands/babel.md) - [build](API/mkdocs/commands/build.md) - [gh_deploy](API/mkdocs/commands/gh_deploy.md) - [new](API/mkdocs/commands/new.md) - [serve](API/mkdocs/commands/serve.md) - [setup](API/mkdocs/commands/setup.md) - [mkdocs.config](API/mkdocs/config.md) - [base](API/mkdocs/config/base.md) - [config_options](API/mkdocs/config/config_options.md) - [defaults](API/mkdocs/config/defaults.md) - [mkdocs.contrib](API/mkdocs/contrib.md) - [search](API/mkdocs/contrib/search.md) - [search_index](API/mkdocs/contrib/search/search_index.md) - [mkdocs.exceptions](API/mkdocs/exceptions.md) - [mkdocs.livereload](API/mkdocs/livereload.md) - [mkdocs.localization](API/mkdocs/localization.md) - [mkdocs.plugins](API/mkdocs/plugins.md) - [mkdocs.structure](API/mkdocs/structure.md) - [files](API/mkdocs/structure/files.md) - [nav](API/mkdocs/structure/nav.md) - [pages](API/mkdocs/structure/pages.md) - [toc](API/mkdocs/structure/toc.md) - [mkdocs.tests](API/mkdocs/tests.md) - [babel_cmd_tests](API/mkdocs/tests/babel_cmd_tests.md) - [base](API/mkdocs/tests/base.md) - [build_tests](API/mkdocs/tests/build_tests.md) - [cli_tests](API/mkdocs/tests/cli_tests.md) - [config](API/mkdocs/tests/config.md) - [base_tests](API/mkdocs/tests/config/base_tests.md) - [config_options_tests](API/mkdocs/tests/config/config_options_tests.md) - [config_tests](API/mkdocs/tests/config/config_tests.md) - [gh_deploy_tests](API/mkdocs/tests/gh_deploy_tests.md) - [integration](API/mkdocs/tests/integration.md) - [livereload_tests](API/mkdocs/tests/livereload_tests.md) - [localization_tests](API/mkdocs/tests/localization_tests.md) - [new_tests](API/mkdocs/tests/new_tests.md) - [plugin_tests](API/mkdocs/tests/plugin_tests.md) - [search_tests](API/mkdocs/tests/search_tests.md) - [structure](API/mkdocs/tests/structure.md) - [file_tests](API/mkdocs/tests/structure/file_tests.md) - [nav_tests](API/mkdocs/tests/structure/nav_tests.md) - [page_tests](API/mkdocs/tests/structure/page_tests.md) - [toc_tests](API/mkdocs/tests/structure/toc_tests.md) - [theme_tests](API/mkdocs/tests/theme_tests.md) - [utils](API/mkdocs/tests/utils.md) - [babel_stub_tests](API/mkdocs/tests/utils/babel_stub_tests.md) - [utils_tests](API/mkdocs/tests/utils/utils_tests.md) - [mkdocs.theme](API/mkdocs/theme.md) - [mkdocs.themes](API/mkdocs/themes.md) - [mkdocs](API/mkdocs/themes/mkdocs.md) - [readthedocs](API/mkdocs/themes/readthedocs.md) - [mkdocs.utils](API/mkdocs/utils.md) - [babel_stub](API/mkdocs/utils/babel_stub.md) - [filters](API/mkdocs/utils/filters.md) - [meta](API/mkdocs/utils/meta.md) - CLI - [CLI 1](index.md) Copy CNAME if needed \u00a4 #|output: asis #| echo: false show_doc(copy_cname_if_needed) source {target=\"_blank\" style=\"float:right; font-size:smaller\"} copy_cname_if_needed \u00a4 copy_cname_if_needed (root_path:str) for has_cname in [True, False]: with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" for fname in [\"settings.ini\", \"README.md\"] + [\"CNAME\"] if has_cname else []: shutil.copyfile(Path(\"..\") / fname, Path(d) / fname) copy_cname_if_needed(d) if has_cname: assert (Path(d) / \"mkdocs\" / \"docs\" / \"CNAME\").exists() else: assert not (Path(d) / \"mkdocs\" / \"docs\" / \"CNAME\").exists() File '/tmp/tmprel24f79/CNAME' copied to '/tmp/tmprel24f79/mkdocs/docs/CNAME'. File '/tmp/tmp_m88pnc4/CNAME' not found, skipping copying.. #|output: asis #| echo: false show_doc(prepare) source {target=\"_blank\" style=\"float:right; font-size:smaller\"} prepare \u00a4 prepare (root_path:str) Prepares mkdocs for serving Params: root_path: path under which mkdocs directory will be created with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" for fname in [\"settings.ini\", \"README.md\", \"CNAME\"]: shutil.copyfile(Path(\"..\") / fname, Path(d) / fname) new(d) prepare(d) !ll {d}/mkdocs/ assert (Path(d) / \"mkdocs\" / \"docs\" / \"CNAME\").exists assert (Path(d) / \"mkdocs\" / \"docs\" / \"API\").exists assert (Path(d) / \"mkdocs\" / \"docs\" / \"SUMMARY.md\").exists assert (Path(d) / \"mkdocs\" / \"docs\" / \"index.md\").exists # !ls {d}/mkdocs/docs Requirements already added to '/tmp/tmpe39h2cxm/settings.ini'. Directory /tmp/tmpe39h2cxm/mkdocs created. File '/tmp/tmpe39h2cxm/mkdocs/mkdocs.yml' generated. File '/tmp/tmpe39h2cxm/mkdocs/summary_template.txt' generated. File '/tmp/tmpe39h2cxm/CNAME' copied to '/tmp/tmpe39h2cxm/mkdocs/docs/CNAME'. cache=Path('/tf/nbdev-mkdocs/_proc') notebooks=[Path('/tf/nbdev-mkdocs/_proc/index.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Mkdocs.ipynb'), Path('/tf/nbdev-mkdocs/_proc/CLI.ipynb'), Path('/tf/nbdev-mkdocs/_proc/PackageData.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Docstring.ipynb'), Path('/tf/nbdev-mkdocs/_proc/guides/Guide_One.ipynb')] File '/tmp/tmpe39h2cxm/mkdocs/docs/index.md' created. File '/tmp/tmpe39h2cxm/mkdocs/docs/Mkdocs.md' created. File '/tmp/tmpe39h2cxm/mkdocs/docs/CLI.md' created. File '/tmp/tmpe39h2cxm/mkdocs/docs/PackageData.md' created. File '/tmp/tmpe39h2cxm/mkdocs/docs/Docstring.md' created. File '/tmp/tmpe39h2cxm/mkdocs/docs/guides/Guide_One.md' created. /root/.local/lib/python3.8/site-packages/mkdocstrings/handlers/python/__init__.py:13: UserWarning: The 'python-legacy' extra of mkdocstrings will become mandatory in the next release. We have no way to detect if you already specify it, so if you do, please ignore this warning. You can globally disable it with the PYTHONWARNINGS environment variable: PYTHONWARNINGS=ignore::UserWarning:mkdocstrings.handlers.python warnings.warn( INFO - Cleaning site directory INFO - Building documentation to directory: /tmp/tmpe39h2cxm/mkdocs/site INFO - The following pages exist in the docs directory, but are not included in the \"nav\" configuration: - CLI.md - Docstring.md - Mkdocs.md - PackageData.md INFO - Documentation built in 1.14 seconds total 20K drwxr-xr-x 4 davor davor 4.0K Oct 20 11:26 docs/ -rw-r--r-- 1 davor davor 2.3K Oct 20 11:26 mkdocs.yml drwxr-xr-x 2 davor davor 4.0K Oct 20 10:16 overrides/ drwxr-xr-x 11 davor davor 4.0K Oct 20 11:26 site/ -rw-r--r-- 1 davor davor 40 Oct 20 11:26 summary_template.txt Preview \u00a4 #|output: asis #| echo: false show_doc(preview) source {target=\"_blank\" style=\"float:right; font-size:smaller\"} preview \u00a4 preview (root_path:str, port:Union[int,NoneType]=None) Previes mkdocs documentation Params: root_path: path under which mkdocs directory will be created port: port to use with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" for fname in [\"settings.ini\", \"README.md\", \"CNAME\"]: shutil.copyfile(Path(\"..\") / fname, Path(d) / fname) new(d) prepare(d) assert (Path(d) / \"mkdocs\" / \"docs\" / \"API\").exists assert (Path(d) / \"mkdocs\" / \"docs\" / \"SUMMARY.md\").exists assert (Path(d) / \"mkdocs\" / \"docs\" / \"index.md\").exists !ls {d}/mkdocs/docs preview(d, port=4000) Requirements already added to '/tmp/tmp1rsf837o/settings.ini'. Directory /tmp/tmp1rsf837o/mkdocs created. File '/tmp/tmp1rsf837o/mkdocs/mkdocs.yml' generated. File '/tmp/tmp1rsf837o/mkdocs/summary_template.txt' generated. File '/tmp/tmp1rsf837o/CNAME' copied to '/tmp/tmp1rsf837o/mkdocs/docs/CNAME'. cache=Path('/tf/nbdev-mkdocs/_proc') notebooks=[Path('/tf/nbdev-mkdocs/_proc/index.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Mkdocs.ipynb'), Path('/tf/nbdev-mkdocs/_proc/CLI.ipynb'), Path('/tf/nbdev-mkdocs/_proc/PackageData.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Docstring.ipynb'), Path('/tf/nbdev-mkdocs/_proc/guides/Guide_One.ipynb')] File '/tmp/tmp1rsf837o/mkdocs/docs/index.md' created. File '/tmp/tmp1rsf837o/mkdocs/docs/Mkdocs.md' created. --------------------------------------------------------------------------- KeyboardInterrupt Traceback (most recent call last) Cell In [37], line 10 6 shutil.copyfile(Path(\"..\") / fname, Path(d) / fname) 8 new(d) ---> 10 prepare(d) 13 assert (Path(d) / \"mkdocs\" / \"docs\" / \"API\").exists 14 assert (Path(d) / \"mkdocs\" / \"docs\" / \"SUMMARY.md\").exists Cell In [34], line 20, in prepare(root_path) 17 lib_name = config[\"DEFAULT\"][\"lib_name\"] 18 lib_path = config[\"DEFAULT\"][\"lib_path\"] ---> 20 build_summary(root_path, lib_path) 22 cmd = f\"mkdocs build -f {root_path}/mkdocs/mkdocs.yml\" 24 # nosemgrep: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true Cell In [30], line 15, in build_summary(root_path, module) 12 shutil.copy(Path(root_path) / \"README.md\", docs_path / \"index.md\") 14 # generate markdown files ---> 15 _generate_markdown_from_nbs(root_path) 17 # generates guides 18 guides = _generate_summary_for_guides(root_path) Cell In [22], line 14, in _generate_markdown_from_nbs(root_path) 12 converter = nbconvert.MarkdownExporter() 13 for nb in notebooks: ---> 14 body, _ = converter.from_filename(nb) 15 dir_prefix = str(nb.parent)[len(str(cache))+1:] 16 md = doc_path / f\"{dir_prefix}\" / f\"{nb.stem}.md\" File /usr/local/lib/python3.8/dist-packages/nbconvert/exporters/exporter.py:190, in Exporter.from_filename(self, filename, resources, **kw) 187 resources[\"metadata\"][\"modified_date\"] = modified_date.strftime(date_format) 189 with open(filename, encoding=\"utf-8\") as f: --> 190 return self.from_file(f, resources=resources, **kw) File /usr/local/lib/python3.8/dist-packages/nbconvert/exporters/exporter.py:207, in Exporter.from_file(self, file_stream, resources, **kw) 192 def from_file(self, file_stream, resources=None, **kw): 193 \"\"\" 194 Convert a notebook from a notebook file. 195 (...) 205 206 \"\"\" --> 207 return self.from_notebook_node( 208 nbformat.read(file_stream, as_version=4), resources=resources, **kw 209 ) File /usr/local/lib/python3.8/dist-packages/nbconvert/exporters/templateexporter.py:386, in TemplateExporter.from_notebook_node(self, nb, resources, **kw) 374 def from_notebook_node(self, nb, resources=None, **kw): 375 \"\"\" 376 Convert a notebook from a notebook node instance. 377 (...) 384 preprocessors and filters. 385 \"\"\" --> 386 nb_copy, resources = super().from_notebook_node(nb, resources, **kw) 387 resources.setdefault(\"raw_mimetypes\", self.raw_mimetypes) 388 resources[\"global_content_filter\"] = { 389 \"include_code\": not self.exclude_code_cell, 390 \"include_markdown\": not self.exclude_markdown, (...) 398 \"no_prompt\": self.exclude_input_prompt and self.exclude_output_prompt, 399 } File /usr/local/lib/python3.8/dist-packages/nbconvert/exporters/exporter.py:147, in Exporter.from_notebook_node(self, nb, resources, **kw) 144 resources[\"language\"] = nb[\"metadata\"][\"language\"].lower() 146 # Preprocess --> 147 nb_copy, resources = self._preprocess(nb_copy, resources) 148 notebook_name = \"\" 149 if resources is not None: File /usr/local/lib/python3.8/dist-packages/nbconvert/exporters/exporter.py:344, in Exporter._preprocess(self, nb, resources) 342 nbc, resc = preprocessor(nbc, resc) 343 if not self.optimistic_validation: --> 344 self._validate_preprocessor(nbc, preprocessor) 346 if self.optimistic_validation: 347 self._validate_preprocessor(nbc, preprocessor) File /usr/local/lib/python3.8/dist-packages/nbconvert/exporters/exporter.py:311, in Exporter._validate_preprocessor(self, nbc, preprocessor) 309 nbformat.validate(nbc, relax_add_props=True) 310 else: --> 311 nbformat.validate(nbc) 312 except nbformat.ValidationError: 313 self.log.error(\"Notebook is invalid after preprocessor %s\", preprocessor) File /usr/local/lib/python3.8/dist-packages/nbformat/validator.py:494, in validate(nbdict, ref, version, version_minor, relax_add_props, nbjson, repair_duplicate_cell_ids, strip_invalid_metadata) 484 assert isinstance(version_minor, int) 485 _normalize( 486 nbdict, 487 version, (...) 491 strip_invalid_metadata=strip_invalid_metadata, 492 ) --> 494 for error in iter_validate( 495 nbdict, 496 ref=ref, 497 version=version, 498 version_minor=version_minor, 499 relax_add_props=relax_add_props, 500 strip_invalid_metadata=strip_invalid_metadata, 501 ): 503 raise error File /usr/local/lib/python3.8/dist-packages/nbformat/validator.py:629, in iter_validate(nbdict, ref, version, version_minor, relax_add_props, nbjson, strip_invalid_metadata) 623 _strip_invalida_metadata(nbdict, version, version_minor, relax_add_props) 625 # Validate one more time to ensure that us removing metadata 626 # didn't cause another complex validation issue in the schema. 627 # Also to ensure that higher-level errors produced by individual metadata validation 628 # failures are removed. --> 629 errors = validator.iter_errors(nbdict) 631 for error in errors: 632 yield better_validation_error(error, version, version_minor) File /usr/local/lib/python3.8/dist-packages/nbformat/json_compat.py:59, in FastJsonSchemaValidator.iter_errors(self, data, schema) 57 validate_func = self._validator 58 try: ---> 59 validate_func(data) 60 except _JsonSchemaException as error: 61 errors = [ValidationError(str(error), schema_path=error.path)] File <string>:135, in validate(data, custom_formats, name_prefix) File <string>:156, in validate___definitions_cell(data, custom_formats, name_prefix) File <string>:262, in validate___definitions_code_cell(data, custom_formats, name_prefix) File <string>:286, in validate___definitions_output(data, custom_formats, name_prefix) File <string>:410, in validate___definitions_display_data(data, custom_formats, name_prefix) File <string>:434, in validate___definitions_misc_mimebundle(data, custom_formats, name_prefix) KeyboardInterrupt:","title":"Mkdocs"},{"location":"Mkdocs/#create-new","text":"","title":"Create new"},{"location":"Mkdocs/#add-requirements-to-settings","text":"with TemporaryDirectory() as d: shutil.copyfile(Path(\"..\") / \"settings.ini\", Path(d) / \"settings.ini\") updater = ConfigUpdater() updater.read(Path(d) / \"settings.ini\") updater[\"DEFAULT\"][\"requirements\"] = Option( key=\"requirements\", value=\"\\\\\\n nbdev>=2.3.7 \\\\\\n typer[all]==0.6.1\" ) updater.update_file() assert \"mkdocs\" not in updater[\"DEFAULT\"][\"requirements\"].value # testing adding requirements _add_requirements_to_settings(d) updater = ConfigUpdater() updater.read(Path(d) / \"settings.ini\") founded = re.findall(\"mkdocs[\\w_\\-\\[\\]]*\", updater[\"DEFAULT\"][\"requirements\"].value) assert len(founded) == 5, founded # do nothin if the requirements are already added _add_requirements_to_settings(d) updater = ConfigUpdater() updater.read(Path(d) / \"settings.ini\") founded = re.findall(\"mkdocs[\\w_\\-\\[\\]]*\", updater[\"DEFAULT\"][\"requirements\"].value) assert len(founded) == 5, founded print(updater) Requirements added to '/tmp/tmpox0d8w7h/settings.ini'. Requirements already added to '/tmp/tmpox0d8w7h/settings.ini'. [DEFAULT] # All sections below are required unless otherwise specified. # See https://github.com/fastai/nbdev/blob/master/settings.ini for examples. ### Python library ### repo = nbdev-mkdocs lib_name = %(repo)s version = 0.0.1rc0 min_python = 3.7 license = apache2 ### nbdev ### doc_path = _docs lib_path = nbdev_mkdocs nbs_path = nbs recursive = True tst_flags = notest put_version_in_init = True black_formatting = True ### Docs ### branch = main custom_sidebar = False doc_host = https://%(user)s.github.io doc_baseurl = /%(repo)s git_url = https://github.com/%(user)s/%(repo)s title = %(lib_name)s ### PyPI ### audience = Developers author = airt author_email = info@airt.ai copyright = 2022 onwards, %(author)s description = Extension of nbdev for generating documentation using Material for Mkdocs instead of Quarto keywords = nbdev jupyter notebook python mkdocs material language = English status = 3 user = airtai ### Optional ### requirements = \\ nbdev>=2.3.7 \\ typer[all]==0.6.1 \\ mkdocs==1.3.0 \\ mkdocstrings==0.18.1 \\ mkdocs-material==8.2.14 \\ mkdocs-literate-nav==0.4.1 \\ mkdocs-section-index==0.3.4 \\ configupdater==3.1.1 \\ griffe==0.22.2 \\ nbconvert==7.0.0 dev_requirements = \\ bandit>=1.7.4 \\ semgrep>=0.115.0 \\ pytest>=7.1.3 \\ numpy>=1.0 console_scripts = nbdev_mkdocs=nbdev_mkdocs.cli:_app","title":"Add requirements to settings"},{"location":"Mkdocs/#create-mkdocs-dir","text":"with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) _create_mkdocs_dir(d) print(\"\\n\".join([str(p) for p in (Path(d) / \"mkdocs\").glob(\"**/*\")])) Directory /tmp/tmp7pveq4sk/mkdocs created. /tmp/tmp7pveq4sk/mkdocs/overrides /tmp/tmp7pveq4sk/mkdocs/site /tmp/tmp7pveq4sk/mkdocs/overrides/main.html /tmp/tmp7pveq4sk/mkdocs/site/stylesheets /tmp/tmp7pveq4sk/mkdocs/site/images /tmp/tmp7pveq4sk/mkdocs/site/javascripts /tmp/tmp7pveq4sk/mkdocs/site/assets /tmp/tmp7pveq4sk/mkdocs/site/404.html /tmp/tmp7pveq4sk/mkdocs/site/stylesheets/extra.css /tmp/tmp7pveq4sk/mkdocs/site/images/favicon.ico /tmp/tmp7pveq4sk/mkdocs/site/javascripts/extra.js /tmp/tmp7pveq4sk/mkdocs/site/assets/stylesheets /tmp/tmp7pveq4sk/mkdocs/site/assets/images /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts /tmp/tmp7pveq4sk/mkdocs/site/assets/_mkdocstrings.css /tmp/tmp7pveq4sk/mkdocs/site/assets/stylesheets/main.3de6f41f.min.css /tmp/tmp7pveq4sk/mkdocs/site/assets/stylesheets/palette.cc9b2e1e.min.css.map /tmp/tmp7pveq4sk/mkdocs/site/assets/stylesheets/main.3de6f41f.min.css.map /tmp/tmp7pveq4sk/mkdocs/site/assets/stylesheets/palette.cc9b2e1e.min.css /tmp/tmp7pveq4sk/mkdocs/site/assets/images/favicon.png /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/workers /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/bundle.c2e1ee47.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/bundle.c2e1ee47.min.js.map /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/workers/search.2a1c317c.min.js.map /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/workers/search.2a1c317c.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/wordcut.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/tinyseg.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.ro.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.pt.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.sv.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.ja.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.stemmer.support.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.hu.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.multi.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.ru.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.jp.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.es.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.no.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.it.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.ar.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.fr.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.zh.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.nl.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.hi.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.fi.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.de.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.da.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.tr.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.th.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.du.min.js /tmp/tmp7pveq4sk/mkdocs/site/assets/javascripts/lunr/min/lunr.vi.min.js","title":"Create mkdocs dir"},{"location":"Mkdocs/#create-mkdocsyml","text":"assert _mkdocs_template_path.exists() print(_mkdocs_template) # Site site_name: {title} site_url: {doc_host}{doc_baseurl} site_author: {author} site_description: {description} # Repository repo_name: {repo} repo_url: {git_url} edit_uri: \"\" copyright: {copyright} docs_dir: docs site_dir: site plugins: - literate-nav: nav_file: SUMMARY.md - search - mkdocstrings: handlers: python: import: - https://docs.python.org/3/objects.inv options: heading_level: 2 show_category_heading: true show_root_heading: true show_root_toc_entry: true show_signature_annotations: true show_if_no_docstring: true markdown_extensions: - pymdownx.arithmatex: generic: true - pymdownx.inlinehilite - pymdownx.details - pymdownx.emoji - pymdownx.magiclink - pymdownx.superfences - pymdownx.tasklist - pymdownx.highlight: linenums: false - pymdownx.snippets: check_paths: true - pymdownx.tabbed: alternate_style: true - admonition - toc: permalink: \"\u00a4\" # - callouts theme: name: material custom_dir: overrides features: - navigation.instant - navigation.tabs - navigation.tabs.sticky # - navigation.sections # - navigation.expand - navigation.indexes - navigation.top # - toc.integrates - search.suggest - search.highlight - search.share palette: - scheme: slate primary: black accent: yellow toggle: icon: material/toggle-switch name: Switch to light mode - scheme: default primary: black # deep orange accent: red toggle: icon: material/toggle-switch-off-outline name: Switch to dark mode icon: repo: fontawesome/brands/github # repo: fontawesome/brands/gitlab logo: material/compass-outline # admonition: # <type>: <icon> favicon: images/favicon.ico extra_css: - stylesheets/extra.css extra_javascript: - javascripts/extra.js - javascripts/mathjax.js - https://polyfill.io/v3/polyfill.min.js?features=es6 - https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) kwargs = _get_kwargs_from_settings(settings_path) actual = _mkdocs_template.format(**kwargs) kwargs {'title': 'nbdev-mkdocs', 'doc_host': 'https://airtai.github.io', 'doc_baseurl': '/nbdev-mkdocs', 'author': 'airt', 'description': 'Extension of nbdev for generating documentation using Material for Mkdocs instead of Quarto', 'repo': 'nbdev-mkdocs', 'git_url': 'https://github.com/airtai/nbdev-mkdocs', 'copyright': '2022 onwards, airt'} with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) _create_mkdocs_yaml(d) with open(Path(d) / \"mkdocs/mkdocs.yml\") as f: y = yaml.safe_load(f) y File '/tmp/tmpuq7ru08i/mkdocs/mkdocs.yml' generated. {'site_name': 'nbdev-mkdocs', 'site_url': 'https://airtai.github.io/nbdev-mkdocs', 'site_author': 'airt', 'site_description': 'Extension of nbdev for generating documentation using Material for Mkdocs instead of Quarto', 'repo_name': 'nbdev-mkdocs', 'repo_url': 'https://github.com/airtai/nbdev-mkdocs', 'edit_uri': '', 'copyright': '2022 onwards, airt', 'docs_dir': 'docs', 'site_dir': 'site', 'plugins': [{'literate-nav': {'nav_file': 'SUMMARY.md'}}, 'search', {'mkdocstrings': {'handlers': {'python': {'import': ['https://docs.python.org/3/objects.inv'], 'options': {'heading_level': 2, 'show_category_heading': True, 'show_root_heading': True, 'show_root_toc_entry': True, 'show_signature_annotations': True, 'show_if_no_docstring': True}}}}}], 'markdown_extensions': [{'pymdownx.arithmatex': {'generic': True}}, 'pymdownx.inlinehilite', 'pymdownx.details', 'pymdownx.emoji', 'pymdownx.magiclink', 'pymdownx.superfences', 'pymdownx.tasklist', {'pymdownx.highlight': {'linenums': False}}, {'pymdownx.snippets': {'check_paths': True}}, {'pymdownx.tabbed': {'alternate_style': True}}, 'admonition', {'toc': {'permalink': '\u00a4'}}], 'theme': {'name': 'material', 'custom_dir': 'overrides', 'features': ['navigation.instant', 'navigation.tabs', 'navigation.tabs.sticky', 'navigation.indexes', 'navigation.top', 'search.suggest', 'search.highlight', 'search.share'], 'palette': [{'scheme': 'slate', 'primary': 'black', 'accent': 'yellow', 'toggle': {'icon': 'material/toggle-switch', 'name': 'Switch to light mode'}}, {'scheme': 'default', 'primary': 'black', 'accent': 'red', 'toggle': {'icon': 'material/toggle-switch-off-outline', 'name': 'Switch to dark mode'}}], 'icon': {'repo': 'fontawesome/brands/github', 'logo': 'material/compass-outline'}, 'favicon': 'images/favicon.ico'}, 'extra_css': ['stylesheets/extra.css'], 'extra_javascript': ['javascripts/extra.js', 'javascripts/mathjax.js', 'https://polyfill.io/v3/polyfill.min.js?features=es6', 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js']}","title":"Create Mkdocs.yml"},{"location":"Mkdocs/#create-summary_templatetxt","text":"with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) _create_mkdocs_yaml(d) _create_summary_template(d) guides = \"\"\"- Guides - [Guide one](docs/guide_1.md)\"\"\" api = \"\"\"- API - [numpy.array](api/numpy/array.md)\"\"\" cli = \"\"\"- CLI - [my-cli](cli/my_cli.md)\"\"\" with open(Path(d) / \"mkdocs/summary_template.txt\") as f: summary_template = f.read() summary = summary_template.format(guides=guides, api=api, cli=cli) # y = yaml.safe_load(summary) print(summary) File '/tmp/tmping37xcf/mkdocs/mkdocs.yml' generated. File '/tmp/tmping37xcf/mkdocs/summary_template.txt' generated. - [Home](index.md) - Guides - [Guide one](docs/guide_1.md) - API - [numpy.array](api/numpy/array.md) - CLI - [my-cli](cli/my_cli.md)","title":"Create summary_template.txt"},{"location":"Mkdocs/#bringing-it-all-together","text":"#|output: asis #| echo: false show_doc(new) source {target=\"_blank\" style=\"float:right; font-size:smaller\"}","title":"Bringing it all together"},{"location":"Mkdocs/#new","text":"new (root_path:str) Initialize mkdocs project files Creates mkdocs directory in the root_path directory and populates it with initial values. You should edit mkdocs.yml file to customize it if needed. Params: root_path: path under which mkdocs directory will be created with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) new(d) mkdocs_path = Path(d) / \"mkdocs\" assert settings_path.exists() assert mkdocs_path.exists() assert (mkdocs_path / \"mkdocs.yml\").exists() assert (mkdocs_path / \"overrides\" / \"main.html\").exists() assert (mkdocs_path / \"site\").exists() assert (mkdocs_path / \"summary_template.txt\").exists() Requirements already added to '/tmp/tmpl_krgmvp/settings.ini'. Directory /tmp/tmpl_krgmvp/mkdocs created. File '/tmp/tmpl_krgmvp/mkdocs/mkdocs.yml' generated. File '/tmp/tmpl_krgmvp/mkdocs/summary_template.txt' generated.","title":"new"},{"location":"Mkdocs/#build","text":"","title":"Build"},{"location":"Mkdocs/#build-markdown-files","text":"(Path(\"/tmp\") / \"/\" / \"///////console.html\").resolve() Path('/console.html') !ls /tmp fish.davor/ tmp2imt9_a__kernels/ tmpocn0mm0j.less fish.root/ tmpmw7n5cwp.less with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) new(d) _generate_markdown_from_nbs(root_path=d) # check markdown files print(\"Checks:\") mds = list((Path(d)/\"mkdocs\"/\"docs\").glob(\"**/*.md\")) print(\"\\n\".join([str(md) for md in mds])) assert len(mds) == 6 Requirements already added to '/tmp/tmpoketlbwi/settings.ini'. Directory /tmp/tmpoketlbwi/mkdocs created. File '/tmp/tmpoketlbwi/mkdocs/mkdocs.yml' generated. File '/tmp/tmpoketlbwi/mkdocs/summary_template.txt' generated. cache=Path('/tf/nbdev-mkdocs/_proc') notebooks=[Path('/tf/nbdev-mkdocs/_proc/index.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Mkdocs.ipynb'), Path('/tf/nbdev-mkdocs/_proc/CLI.ipynb'), Path('/tf/nbdev-mkdocs/_proc/PackageData.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Docstring.ipynb'), Path('/tf/nbdev-mkdocs/_proc/guides/Guide_One.ipynb')] File '/tmp/tmpoketlbwi/mkdocs/docs/index.md' created. File '/tmp/tmpoketlbwi/mkdocs/docs/Mkdocs.md' created. File '/tmp/tmpoketlbwi/mkdocs/docs/CLI.md' created. File '/tmp/tmpoketlbwi/mkdocs/docs/PackageData.md' created. File '/tmp/tmpoketlbwi/mkdocs/docs/Docstring.md' created. File '/tmp/tmpoketlbwi/mkdocs/docs/guides/Guide_One.md' created. Checks: /tmp/tmpoketlbwi/mkdocs/docs/CLI.md /tmp/tmpoketlbwi/mkdocs/docs/PackageData.md /tmp/tmpoketlbwi/mkdocs/docs/Docstring.md /tmp/tmpoketlbwi/mkdocs/docs/index.md /tmp/tmpoketlbwi/mkdocs/docs/Mkdocs.md /tmp/tmpoketlbwi/mkdocs/docs/guides/Guide_One.md /usr/local/lib/python3.8/dist-packages/nbformat/__init__.py:92: MissingIDFieldWarning: Code cell is missing an id field, this will become a hard error in future nbformat versions. You may want to use `normalize()` on your notebooks before validations (available since nbformat 5.1.4). Previous versions of nbformat are fixing this issue transparently, and will stop doing so in the future. validate(nb)","title":"Build markdown files"},{"location":"Mkdocs/#build-summary-for-guides","text":"with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) new(d) _generate_markdown_from_nbs(root_path=d) guides = _generate_summary_for_guides(root_path=d) print(guides) Requirements already added to '/tmp/tmpdpcbqc69/settings.ini'. Directory /tmp/tmpdpcbqc69/mkdocs created. File '/tmp/tmpdpcbqc69/mkdocs/mkdocs.yml' generated. File '/tmp/tmpdpcbqc69/mkdocs/summary_template.txt' generated. cache=Path('/tf/nbdev-mkdocs/_proc') notebooks=[Path('/tf/nbdev-mkdocs/_proc/index.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Mkdocs.ipynb'), Path('/tf/nbdev-mkdocs/_proc/CLI.ipynb'), Path('/tf/nbdev-mkdocs/_proc/PackageData.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Docstring.ipynb'), Path('/tf/nbdev-mkdocs/_proc/guides/Guide_One.ipynb')] File '/tmp/tmpdpcbqc69/mkdocs/docs/index.md' created. File '/tmp/tmpdpcbqc69/mkdocs/docs/Mkdocs.md' created. File '/tmp/tmpdpcbqc69/mkdocs/docs/CLI.md' created. File '/tmp/tmpdpcbqc69/mkdocs/docs/PackageData.md' created. File '/tmp/tmpdpcbqc69/mkdocs/docs/Docstring.md' created. File '/tmp/tmpdpcbqc69/mkdocs/docs/guides/Guide_One.md' created. - Guides - [Guide One](guides/Guide_One.md)","title":"Build summary for guides"},{"location":"Mkdocs/#build-api","text":"#|output: asis #| echo: false show_doc(get_submodules) source {target=\"_blank\" style=\"float:right; font-size:smaller\"}","title":"Build API"},{"location":"Mkdocs/#get_submodules","text":"get_submodules (package_name:str) submodules = get_submodules(\"mkdocs\") submodules ['mkdocs.commands', 'mkdocs.commands.babel', 'mkdocs.commands.build', 'mkdocs.commands.gh_deploy', 'mkdocs.commands.new', 'mkdocs.commands.serve', 'mkdocs.commands.setup', 'mkdocs.config', 'mkdocs.config.base', 'mkdocs.config.config_options', 'mkdocs.config.defaults', 'mkdocs.contrib', 'mkdocs.contrib.search', 'mkdocs.contrib.search.search_index', 'mkdocs.exceptions', 'mkdocs.livereload', 'mkdocs.localization', 'mkdocs.plugins', 'mkdocs.structure', 'mkdocs.structure.files', 'mkdocs.structure.nav', 'mkdocs.structure.pages', 'mkdocs.structure.toc', 'mkdocs.tests', 'mkdocs.tests.babel_cmd_tests', 'mkdocs.tests.base', 'mkdocs.tests.build_tests', 'mkdocs.tests.cli_tests', 'mkdocs.tests.config', 'mkdocs.tests.config.base_tests', 'mkdocs.tests.config.config_options_tests', 'mkdocs.tests.config.config_tests', 'mkdocs.tests.gh_deploy_tests', 'mkdocs.tests.integration', 'mkdocs.tests.livereload_tests', 'mkdocs.tests.localization_tests', 'mkdocs.tests.new_tests', 'mkdocs.tests.plugin_tests', 'mkdocs.tests.search_tests', 'mkdocs.tests.structure', 'mkdocs.tests.structure.file_tests', 'mkdocs.tests.structure.nav_tests', 'mkdocs.tests.structure.page_tests', 'mkdocs.tests.structure.toc_tests', 'mkdocs.tests.theme_tests', 'mkdocs.tests.utils', 'mkdocs.tests.utils.babel_stub_tests', 'mkdocs.tests.utils.utils_tests', 'mkdocs.theme', 'mkdocs.themes', 'mkdocs.themes.mkdocs', 'mkdocs.themes.readthedocs', 'mkdocs.utils', 'mkdocs.utils.babel_stub', 'mkdocs.utils.filters', 'mkdocs.utils.meta'] #|output: asis #| echo: false show_doc(generate_api_docs_for_module) source {target=\"_blank\" style=\"float:right; font-size:smaller\"}","title":"get_submodules"},{"location":"Mkdocs/#generate_api_docs_for_module","text":"generate_api_docs_for_module (root_path:str, module_name:str) #|output: asis #| echo: false show_doc(generate_api_doc_for_submodule) source {target=\"_blank\" style=\"float:right; font-size:smaller\"}","title":"generate_api_docs_for_module"},{"location":"Mkdocs/#generate_api_doc_for_submodule","text":"generate_api_doc_for_submodule (root_path:str, submodule:str) with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" shutil.copyfile(Path(\"..\") / \"settings.ini\", settings_path) new(d) api_summary = generate_api_docs_for_module(d, \"mkdocs\") print(api_summary) # make sure all paths exist paths = re.findall(\"\\(.*?\\)\", api_summary) paths = [Path(d) / \"mkdocs/docs\" / x[1:-1] for x in paths] for path in paths: assert path.exists(), path Requirements already added to '/tmp/tmpn84hj2w_/settings.ini'. Directory /tmp/tmpn84hj2w_/mkdocs created. File '/tmp/tmpn84hj2w_/mkdocs/mkdocs.yml' generated. File '/tmp/tmpn84hj2w_/mkdocs/summary_template.txt' generated. - API - [mkdocs.commands](API/mkdocs/commands.md) - [babel](API/mkdocs/commands/babel.md) - [build](API/mkdocs/commands/build.md) - [gh_deploy](API/mkdocs/commands/gh_deploy.md) - [new](API/mkdocs/commands/new.md) - [serve](API/mkdocs/commands/serve.md) - [setup](API/mkdocs/commands/setup.md) - [mkdocs.config](API/mkdocs/config.md) - [base](API/mkdocs/config/base.md) - [config_options](API/mkdocs/config/config_options.md) - [defaults](API/mkdocs/config/defaults.md) - [mkdocs.contrib](API/mkdocs/contrib.md) - [search](API/mkdocs/contrib/search.md) - [search_index](API/mkdocs/contrib/search/search_index.md) - [mkdocs.exceptions](API/mkdocs/exceptions.md) - [mkdocs.livereload](API/mkdocs/livereload.md) - [mkdocs.localization](API/mkdocs/localization.md) - [mkdocs.plugins](API/mkdocs/plugins.md) - [mkdocs.structure](API/mkdocs/structure.md) - [files](API/mkdocs/structure/files.md) - [nav](API/mkdocs/structure/nav.md) - [pages](API/mkdocs/structure/pages.md) - [toc](API/mkdocs/structure/toc.md) - [mkdocs.tests](API/mkdocs/tests.md) - [babel_cmd_tests](API/mkdocs/tests/babel_cmd_tests.md) - [base](API/mkdocs/tests/base.md) - [build_tests](API/mkdocs/tests/build_tests.md) - [cli_tests](API/mkdocs/tests/cli_tests.md) - [config](API/mkdocs/tests/config.md) - [base_tests](API/mkdocs/tests/config/base_tests.md) - [config_options_tests](API/mkdocs/tests/config/config_options_tests.md) - [config_tests](API/mkdocs/tests/config/config_tests.md) - [gh_deploy_tests](API/mkdocs/tests/gh_deploy_tests.md) - [integration](API/mkdocs/tests/integration.md) - [livereload_tests](API/mkdocs/tests/livereload_tests.md) - [localization_tests](API/mkdocs/tests/localization_tests.md) - [new_tests](API/mkdocs/tests/new_tests.md) - [plugin_tests](API/mkdocs/tests/plugin_tests.md) - [search_tests](API/mkdocs/tests/search_tests.md) - [structure](API/mkdocs/tests/structure.md) - [file_tests](API/mkdocs/tests/structure/file_tests.md) - [nav_tests](API/mkdocs/tests/structure/nav_tests.md) - [page_tests](API/mkdocs/tests/structure/page_tests.md) - [toc_tests](API/mkdocs/tests/structure/toc_tests.md) - [theme_tests](API/mkdocs/tests/theme_tests.md) - [utils](API/mkdocs/tests/utils.md) - [babel_stub_tests](API/mkdocs/tests/utils/babel_stub_tests.md) - [utils_tests](API/mkdocs/tests/utils/utils_tests.md) - [mkdocs.theme](API/mkdocs/theme.md) - [mkdocs.themes](API/mkdocs/themes.md) - [mkdocs](API/mkdocs/themes/mkdocs.md) - [readthedocs](API/mkdocs/themes/readthedocs.md) - [mkdocs.utils](API/mkdocs/utils.md) - [babel_stub](API/mkdocs/utils/babel_stub.md) - [filters](API/mkdocs/utils/filters.md) - [meta](API/mkdocs/utils/meta.md)","title":"generate_api_doc_for_submodule"},{"location":"Mkdocs/#brining-it-all-together","text":"#|output: asis #| echo: false show_doc(build_summary) source {target=\"_blank\" style=\"float:right; font-size:smaller\"}","title":"Brining it all together"},{"location":"Mkdocs/#build_summary","text":"build_summary (root_path:str, module:str) with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" for fname in [\"settings.ini\", \"README.md\"]: shutil.copyfile(Path(\"..\") / fname, Path(d) / fname) new(d) build_summary(d, \"mkdocs\") with open(Path(d) / \"mkdocs/docs/SUMMARY.md\") as f: summary = f.read() print(summary) Requirements already added to '/tmp/tmpetk8k_o9/settings.ini'. Directory /tmp/tmpetk8k_o9/mkdocs created. File '/tmp/tmpetk8k_o9/mkdocs/mkdocs.yml' generated. File '/tmp/tmpetk8k_o9/mkdocs/summary_template.txt' generated. cache=Path('/tf/nbdev-mkdocs/_proc') notebooks=[Path('/tf/nbdev-mkdocs/_proc/index.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Mkdocs.ipynb'), Path('/tf/nbdev-mkdocs/_proc/CLI.ipynb'), Path('/tf/nbdev-mkdocs/_proc/PackageData.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Docstring.ipynb'), Path('/tf/nbdev-mkdocs/_proc/guides/Guide_One.ipynb')] File '/tmp/tmpetk8k_o9/mkdocs/docs/index.md' created. File '/tmp/tmpetk8k_o9/mkdocs/docs/Mkdocs.md' created. File '/tmp/tmpetk8k_o9/mkdocs/docs/CLI.md' created. File '/tmp/tmpetk8k_o9/mkdocs/docs/PackageData.md' created. File '/tmp/tmpetk8k_o9/mkdocs/docs/Docstring.md' created. File '/tmp/tmpetk8k_o9/mkdocs/docs/guides/Guide_One.md' created. - [Home](index.md) - Guides - [Guide One](guides/Guide_One.md) - API - [mkdocs.commands](API/mkdocs/commands.md) - [babel](API/mkdocs/commands/babel.md) - [build](API/mkdocs/commands/build.md) - [gh_deploy](API/mkdocs/commands/gh_deploy.md) - [new](API/mkdocs/commands/new.md) - [serve](API/mkdocs/commands/serve.md) - [setup](API/mkdocs/commands/setup.md) - [mkdocs.config](API/mkdocs/config.md) - [base](API/mkdocs/config/base.md) - [config_options](API/mkdocs/config/config_options.md) - [defaults](API/mkdocs/config/defaults.md) - [mkdocs.contrib](API/mkdocs/contrib.md) - [search](API/mkdocs/contrib/search.md) - [search_index](API/mkdocs/contrib/search/search_index.md) - [mkdocs.exceptions](API/mkdocs/exceptions.md) - [mkdocs.livereload](API/mkdocs/livereload.md) - [mkdocs.localization](API/mkdocs/localization.md) - [mkdocs.plugins](API/mkdocs/plugins.md) - [mkdocs.structure](API/mkdocs/structure.md) - [files](API/mkdocs/structure/files.md) - [nav](API/mkdocs/structure/nav.md) - [pages](API/mkdocs/structure/pages.md) - [toc](API/mkdocs/structure/toc.md) - [mkdocs.tests](API/mkdocs/tests.md) - [babel_cmd_tests](API/mkdocs/tests/babel_cmd_tests.md) - [base](API/mkdocs/tests/base.md) - [build_tests](API/mkdocs/tests/build_tests.md) - [cli_tests](API/mkdocs/tests/cli_tests.md) - [config](API/mkdocs/tests/config.md) - [base_tests](API/mkdocs/tests/config/base_tests.md) - [config_options_tests](API/mkdocs/tests/config/config_options_tests.md) - [config_tests](API/mkdocs/tests/config/config_tests.md) - [gh_deploy_tests](API/mkdocs/tests/gh_deploy_tests.md) - [integration](API/mkdocs/tests/integration.md) - [livereload_tests](API/mkdocs/tests/livereload_tests.md) - [localization_tests](API/mkdocs/tests/localization_tests.md) - [new_tests](API/mkdocs/tests/new_tests.md) - [plugin_tests](API/mkdocs/tests/plugin_tests.md) - [search_tests](API/mkdocs/tests/search_tests.md) - [structure](API/mkdocs/tests/structure.md) - [file_tests](API/mkdocs/tests/structure/file_tests.md) - [nav_tests](API/mkdocs/tests/structure/nav_tests.md) - [page_tests](API/mkdocs/tests/structure/page_tests.md) - [toc_tests](API/mkdocs/tests/structure/toc_tests.md) - [theme_tests](API/mkdocs/tests/theme_tests.md) - [utils](API/mkdocs/tests/utils.md) - [babel_stub_tests](API/mkdocs/tests/utils/babel_stub_tests.md) - [utils_tests](API/mkdocs/tests/utils/utils_tests.md) - [mkdocs.theme](API/mkdocs/theme.md) - [mkdocs.themes](API/mkdocs/themes.md) - [mkdocs](API/mkdocs/themes/mkdocs.md) - [readthedocs](API/mkdocs/themes/readthedocs.md) - [mkdocs.utils](API/mkdocs/utils.md) - [babel_stub](API/mkdocs/utils/babel_stub.md) - [filters](API/mkdocs/utils/filters.md) - [meta](API/mkdocs/utils/meta.md) - CLI - [CLI 1](index.md)","title":"build_summary"},{"location":"Mkdocs/#copy-cname-if-needed","text":"#|output: asis #| echo: false show_doc(copy_cname_if_needed) source {target=\"_blank\" style=\"float:right; font-size:smaller\"}","title":"Copy CNAME if needed"},{"location":"Mkdocs/#copy_cname_if_needed","text":"copy_cname_if_needed (root_path:str) for has_cname in [True, False]: with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" for fname in [\"settings.ini\", \"README.md\"] + [\"CNAME\"] if has_cname else []: shutil.copyfile(Path(\"..\") / fname, Path(d) / fname) copy_cname_if_needed(d) if has_cname: assert (Path(d) / \"mkdocs\" / \"docs\" / \"CNAME\").exists() else: assert not (Path(d) / \"mkdocs\" / \"docs\" / \"CNAME\").exists() File '/tmp/tmprel24f79/CNAME' copied to '/tmp/tmprel24f79/mkdocs/docs/CNAME'. File '/tmp/tmp_m88pnc4/CNAME' not found, skipping copying.. #|output: asis #| echo: false show_doc(prepare) source {target=\"_blank\" style=\"float:right; font-size:smaller\"}","title":"copy_cname_if_needed"},{"location":"Mkdocs/#prepare","text":"prepare (root_path:str) Prepares mkdocs for serving Params: root_path: path under which mkdocs directory will be created with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" for fname in [\"settings.ini\", \"README.md\", \"CNAME\"]: shutil.copyfile(Path(\"..\") / fname, Path(d) / fname) new(d) prepare(d) !ll {d}/mkdocs/ assert (Path(d) / \"mkdocs\" / \"docs\" / \"CNAME\").exists assert (Path(d) / \"mkdocs\" / \"docs\" / \"API\").exists assert (Path(d) / \"mkdocs\" / \"docs\" / \"SUMMARY.md\").exists assert (Path(d) / \"mkdocs\" / \"docs\" / \"index.md\").exists # !ls {d}/mkdocs/docs Requirements already added to '/tmp/tmpe39h2cxm/settings.ini'. Directory /tmp/tmpe39h2cxm/mkdocs created. File '/tmp/tmpe39h2cxm/mkdocs/mkdocs.yml' generated. File '/tmp/tmpe39h2cxm/mkdocs/summary_template.txt' generated. File '/tmp/tmpe39h2cxm/CNAME' copied to '/tmp/tmpe39h2cxm/mkdocs/docs/CNAME'. cache=Path('/tf/nbdev-mkdocs/_proc') notebooks=[Path('/tf/nbdev-mkdocs/_proc/index.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Mkdocs.ipynb'), Path('/tf/nbdev-mkdocs/_proc/CLI.ipynb'), Path('/tf/nbdev-mkdocs/_proc/PackageData.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Docstring.ipynb'), Path('/tf/nbdev-mkdocs/_proc/guides/Guide_One.ipynb')] File '/tmp/tmpe39h2cxm/mkdocs/docs/index.md' created. File '/tmp/tmpe39h2cxm/mkdocs/docs/Mkdocs.md' created. File '/tmp/tmpe39h2cxm/mkdocs/docs/CLI.md' created. File '/tmp/tmpe39h2cxm/mkdocs/docs/PackageData.md' created. File '/tmp/tmpe39h2cxm/mkdocs/docs/Docstring.md' created. File '/tmp/tmpe39h2cxm/mkdocs/docs/guides/Guide_One.md' created. /root/.local/lib/python3.8/site-packages/mkdocstrings/handlers/python/__init__.py:13: UserWarning: The 'python-legacy' extra of mkdocstrings will become mandatory in the next release. We have no way to detect if you already specify it, so if you do, please ignore this warning. You can globally disable it with the PYTHONWARNINGS environment variable: PYTHONWARNINGS=ignore::UserWarning:mkdocstrings.handlers.python warnings.warn( INFO - Cleaning site directory INFO - Building documentation to directory: /tmp/tmpe39h2cxm/mkdocs/site INFO - The following pages exist in the docs directory, but are not included in the \"nav\" configuration: - CLI.md - Docstring.md - Mkdocs.md - PackageData.md INFO - Documentation built in 1.14 seconds total 20K drwxr-xr-x 4 davor davor 4.0K Oct 20 11:26 docs/ -rw-r--r-- 1 davor davor 2.3K Oct 20 11:26 mkdocs.yml drwxr-xr-x 2 davor davor 4.0K Oct 20 10:16 overrides/ drwxr-xr-x 11 davor davor 4.0K Oct 20 11:26 site/ -rw-r--r-- 1 davor davor 40 Oct 20 11:26 summary_template.txt","title":"prepare"},{"location":"Mkdocs/#preview","text":"#|output: asis #| echo: false show_doc(preview) source {target=\"_blank\" style=\"float:right; font-size:smaller\"}","title":"Preview"},{"location":"Mkdocs/#preview_1","text":"preview (root_path:str, port:Union[int,NoneType]=None) Previes mkdocs documentation Params: root_path: path under which mkdocs directory will be created port: port to use with TemporaryDirectory() as d: settings_path = Path(d) / \"settings.ini\" for fname in [\"settings.ini\", \"README.md\", \"CNAME\"]: shutil.copyfile(Path(\"..\") / fname, Path(d) / fname) new(d) prepare(d) assert (Path(d) / \"mkdocs\" / \"docs\" / \"API\").exists assert (Path(d) / \"mkdocs\" / \"docs\" / \"SUMMARY.md\").exists assert (Path(d) / \"mkdocs\" / \"docs\" / \"index.md\").exists !ls {d}/mkdocs/docs preview(d, port=4000) Requirements already added to '/tmp/tmp1rsf837o/settings.ini'. Directory /tmp/tmp1rsf837o/mkdocs created. File '/tmp/tmp1rsf837o/mkdocs/mkdocs.yml' generated. File '/tmp/tmp1rsf837o/mkdocs/summary_template.txt' generated. File '/tmp/tmp1rsf837o/CNAME' copied to '/tmp/tmp1rsf837o/mkdocs/docs/CNAME'. cache=Path('/tf/nbdev-mkdocs/_proc') notebooks=[Path('/tf/nbdev-mkdocs/_proc/index.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Mkdocs.ipynb'), Path('/tf/nbdev-mkdocs/_proc/CLI.ipynb'), Path('/tf/nbdev-mkdocs/_proc/PackageData.ipynb'), Path('/tf/nbdev-mkdocs/_proc/Docstring.ipynb'), Path('/tf/nbdev-mkdocs/_proc/guides/Guide_One.ipynb')] File '/tmp/tmp1rsf837o/mkdocs/docs/index.md' created. File '/tmp/tmp1rsf837o/mkdocs/docs/Mkdocs.md' created. --------------------------------------------------------------------------- KeyboardInterrupt Traceback (most recent call last) Cell In [37], line 10 6 shutil.copyfile(Path(\"..\") / fname, Path(d) / fname) 8 new(d) ---> 10 prepare(d) 13 assert (Path(d) / \"mkdocs\" / \"docs\" / \"API\").exists 14 assert (Path(d) / \"mkdocs\" / \"docs\" / \"SUMMARY.md\").exists Cell In [34], line 20, in prepare(root_path) 17 lib_name = config[\"DEFAULT\"][\"lib_name\"] 18 lib_path = config[\"DEFAULT\"][\"lib_path\"] ---> 20 build_summary(root_path, lib_path) 22 cmd = f\"mkdocs build -f {root_path}/mkdocs/mkdocs.yml\" 24 # nosemgrep: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true Cell In [30], line 15, in build_summary(root_path, module) 12 shutil.copy(Path(root_path) / \"README.md\", docs_path / \"index.md\") 14 # generate markdown files ---> 15 _generate_markdown_from_nbs(root_path) 17 # generates guides 18 guides = _generate_summary_for_guides(root_path) Cell In [22], line 14, in _generate_markdown_from_nbs(root_path) 12 converter = nbconvert.MarkdownExporter() 13 for nb in notebooks: ---> 14 body, _ = converter.from_filename(nb) 15 dir_prefix = str(nb.parent)[len(str(cache))+1:] 16 md = doc_path / f\"{dir_prefix}\" / f\"{nb.stem}.md\" File /usr/local/lib/python3.8/dist-packages/nbconvert/exporters/exporter.py:190, in Exporter.from_filename(self, filename, resources, **kw) 187 resources[\"metadata\"][\"modified_date\"] = modified_date.strftime(date_format) 189 with open(filename, encoding=\"utf-8\") as f: --> 190 return self.from_file(f, resources=resources, **kw) File /usr/local/lib/python3.8/dist-packages/nbconvert/exporters/exporter.py:207, in Exporter.from_file(self, file_stream, resources, **kw) 192 def from_file(self, file_stream, resources=None, **kw): 193 \"\"\" 194 Convert a notebook from a notebook file. 195 (...) 205 206 \"\"\" --> 207 return self.from_notebook_node( 208 nbformat.read(file_stream, as_version=4), resources=resources, **kw 209 ) File /usr/local/lib/python3.8/dist-packages/nbconvert/exporters/templateexporter.py:386, in TemplateExporter.from_notebook_node(self, nb, resources, **kw) 374 def from_notebook_node(self, nb, resources=None, **kw): 375 \"\"\" 376 Convert a notebook from a notebook node instance. 377 (...) 384 preprocessors and filters. 385 \"\"\" --> 386 nb_copy, resources = super().from_notebook_node(nb, resources, **kw) 387 resources.setdefault(\"raw_mimetypes\", self.raw_mimetypes) 388 resources[\"global_content_filter\"] = { 389 \"include_code\": not self.exclude_code_cell, 390 \"include_markdown\": not self.exclude_markdown, (...) 398 \"no_prompt\": self.exclude_input_prompt and self.exclude_output_prompt, 399 } File /usr/local/lib/python3.8/dist-packages/nbconvert/exporters/exporter.py:147, in Exporter.from_notebook_node(self, nb, resources, **kw) 144 resources[\"language\"] = nb[\"metadata\"][\"language\"].lower() 146 # Preprocess --> 147 nb_copy, resources = self._preprocess(nb_copy, resources) 148 notebook_name = \"\" 149 if resources is not None: File /usr/local/lib/python3.8/dist-packages/nbconvert/exporters/exporter.py:344, in Exporter._preprocess(self, nb, resources) 342 nbc, resc = preprocessor(nbc, resc) 343 if not self.optimistic_validation: --> 344 self._validate_preprocessor(nbc, preprocessor) 346 if self.optimistic_validation: 347 self._validate_preprocessor(nbc, preprocessor) File /usr/local/lib/python3.8/dist-packages/nbconvert/exporters/exporter.py:311, in Exporter._validate_preprocessor(self, nbc, preprocessor) 309 nbformat.validate(nbc, relax_add_props=True) 310 else: --> 311 nbformat.validate(nbc) 312 except nbformat.ValidationError: 313 self.log.error(\"Notebook is invalid after preprocessor %s\", preprocessor) File /usr/local/lib/python3.8/dist-packages/nbformat/validator.py:494, in validate(nbdict, ref, version, version_minor, relax_add_props, nbjson, repair_duplicate_cell_ids, strip_invalid_metadata) 484 assert isinstance(version_minor, int) 485 _normalize( 486 nbdict, 487 version, (...) 491 strip_invalid_metadata=strip_invalid_metadata, 492 ) --> 494 for error in iter_validate( 495 nbdict, 496 ref=ref, 497 version=version, 498 version_minor=version_minor, 499 relax_add_props=relax_add_props, 500 strip_invalid_metadata=strip_invalid_metadata, 501 ): 503 raise error File /usr/local/lib/python3.8/dist-packages/nbformat/validator.py:629, in iter_validate(nbdict, ref, version, version_minor, relax_add_props, nbjson, strip_invalid_metadata) 623 _strip_invalida_metadata(nbdict, version, version_minor, relax_add_props) 625 # Validate one more time to ensure that us removing metadata 626 # didn't cause another complex validation issue in the schema. 627 # Also to ensure that higher-level errors produced by individual metadata validation 628 # failures are removed. --> 629 errors = validator.iter_errors(nbdict) 631 for error in errors: 632 yield better_validation_error(error, version, version_minor) File /usr/local/lib/python3.8/dist-packages/nbformat/json_compat.py:59, in FastJsonSchemaValidator.iter_errors(self, data, schema) 57 validate_func = self._validator 58 try: ---> 59 validate_func(data) 60 except _JsonSchemaException as error: 61 errors = [ValidationError(str(error), schema_path=error.path)] File <string>:135, in validate(data, custom_formats, name_prefix) File <string>:156, in validate___definitions_cell(data, custom_formats, name_prefix) File <string>:262, in validate___definitions_code_cell(data, custom_formats, name_prefix) File <string>:286, in validate___definitions_output(data, custom_formats, name_prefix) File <string>:410, in validate___definitions_display_data(data, custom_formats, name_prefix) File <string>:434, in validate___definitions_misc_mimebundle(data, custom_formats, name_prefix) KeyboardInterrupt:","title":"preview"},{"location":"PackageData/","text":"#|output: asis #| echo: false show_doc(get_root_data_path) get_root_data_path \u00a4 get_root_data_path () Returns path to package_data in lib Example: from nbdev_mkdocs._package_data import get_root_data_path req_path = get_root_data_path () / \"requirements.txt\" print ( f \"Path is: { req_path . resolve () } \" ) assert req_path . exists () get_root_data_path.__doc__ 'Returns path to package_data in lib\\n\\n Example:\\n ``` python\\n from nbdev_mkdocs._package_data import get_root_data_path\\n\\n req_path = get_root_data_path() / \"requirements.txt\"\\n print(f\"Path is: {req_path.resolve()}\")\\n assert req_path.exists()\\n \\n ```\\n \\n ' from nbdev_mkdocs.docstring import run_examples_from_docstring run_examples_from_docstring(get_root_data_path) Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 from nbdev_mkdocs._package_data import get_root_data_path req_path = get_root_data_path () / \"requirements.txt\" print ( f\"Path is: { req_path.resolve ()} \" ) assert req_path.exists () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Path is: /root/.local/lib/python3.8/site-packages/nbdev_mkdocs/package_data/ requirements. txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"PackageData"},{"location":"PackageData/#get_root_data_path","text":"get_root_data_path () Returns path to package_data in lib Example: from nbdev_mkdocs._package_data import get_root_data_path req_path = get_root_data_path () / \"requirements.txt\" print ( f \"Path is: { req_path . resolve () } \" ) assert req_path . exists () get_root_data_path.__doc__ 'Returns path to package_data in lib\\n\\n Example:\\n ``` python\\n from nbdev_mkdocs._package_data import get_root_data_path\\n\\n req_path = get_root_data_path() / \"requirements.txt\"\\n print(f\"Path is: {req_path.resolve()}\")\\n assert req_path.exists()\\n \\n ```\\n \\n ' from nbdev_mkdocs.docstring import run_examples_from_docstring run_examples_from_docstring(get_root_data_path) Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 from nbdev_mkdocs._package_data import get_root_data_path req_path = get_root_data_path () / \"requirements.txt\" print ( f\"Path is: { req_path.resolve ()} \" ) assert req_path.exists () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Path is: /root/.local/lib/python3.8/site-packages/nbdev_mkdocs/package_data/ requirements. txt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500","title":"get_root_data_path"},{"location":"SUMMARY/","text":"Home Guides Guide One API nbdev_mkdocs.cli nbdev_mkdocs.docstring nbdev_mkdocs.mkdocs CLI CLI 1","title":"SUMMARY"},{"location":"API/nbdev_mkdocs/cli/","text":"new ( root_path =< typer . models . OptionInfo object at 0x7f7681137fd0 > ) \u00a4 CLI command for creating files for nbdev_mkdocs command Source code in nbdev_mkdocs/cli.py @_app . command ( help = \"Creates files in **mkdocs** subdirectory needed for other **nbdev_mkdocs** subcommands\" , ) def new ( root_path : str = typer . Option ( \".\" , help = \"\" )): \"\"\"CLI command for creating files for nbdev_mkdocs command\"\"\" try : nbdev_mkdocs . mkdocs . new ( root_path = root_path ) except Exception as e : typer . secho ( \"Unexpected internal error :/\" , err = True , fg = typer . colors . RED ) raise typer . Exit ( 1 ) prepare ( root_path =< typer . models . OptionInfo object at 0x7f7685f641c0 > ) \u00a4 CLI command for creating files for nbdev_mkdocs command Source code in nbdev_mkdocs/cli.py @_app . command ( help = \"Prepares files in **mkdocs/docs** and then runs **mkdocs build** command on them \" , ) def prepare ( root_path : str = typer . Option ( \".\" , help = \"\" )): \"\"\"CLI command for creating files for nbdev_mkdocs command\"\"\" try : nbdev_mkdocs . mkdocs . prepare ( root_path = root_path ) except Exception as e : typer . secho ( \"Unexpected internal error :/\" , err = True , fg = typer . colors . RED ) raise typer . Exit ( 1 ) preview ( root_path =< typer . models . OptionInfo object at 0x7f768151f8e0 > ) \u00a4 CLI command for creating files for nbdev_mkdocs command Source code in nbdev_mkdocs/cli.py @_app . command ( help = \"Prepares files in **mkdocs/docs** and then runs **mkdocs serve** command on them \" , ) def preview ( root_path : str = typer . Option ( \".\" , help = \"\" )): \"\"\"CLI command for creating files for nbdev_mkdocs command\"\"\" try : nbdev_mkdocs . mkdocs . preview ( root_path = root_path , port = 4000 ) except Exception as e : typer . secho ( \"Unexpected internal error :/\" , err = True , fg = typer . colors . RED ) raise typer . Exit ( 1 )","title":"nbdev_mkdocs.cli"},{"location":"API/nbdev_mkdocs/cli/#nbdev_mkdocs.cli.new","text":"CLI command for creating files for nbdev_mkdocs command Source code in nbdev_mkdocs/cli.py @_app . command ( help = \"Creates files in **mkdocs** subdirectory needed for other **nbdev_mkdocs** subcommands\" , ) def new ( root_path : str = typer . Option ( \".\" , help = \"\" )): \"\"\"CLI command for creating files for nbdev_mkdocs command\"\"\" try : nbdev_mkdocs . mkdocs . new ( root_path = root_path ) except Exception as e : typer . secho ( \"Unexpected internal error :/\" , err = True , fg = typer . colors . RED ) raise typer . Exit ( 1 )","title":"new()"},{"location":"API/nbdev_mkdocs/cli/#nbdev_mkdocs.cli.prepare","text":"CLI command for creating files for nbdev_mkdocs command Source code in nbdev_mkdocs/cli.py @_app . command ( help = \"Prepares files in **mkdocs/docs** and then runs **mkdocs build** command on them \" , ) def prepare ( root_path : str = typer . Option ( \".\" , help = \"\" )): \"\"\"CLI command for creating files for nbdev_mkdocs command\"\"\" try : nbdev_mkdocs . mkdocs . prepare ( root_path = root_path ) except Exception as e : typer . secho ( \"Unexpected internal error :/\" , err = True , fg = typer . colors . RED ) raise typer . Exit ( 1 )","title":"prepare()"},{"location":"API/nbdev_mkdocs/cli/#nbdev_mkdocs.cli.preview","text":"CLI command for creating files for nbdev_mkdocs command Source code in nbdev_mkdocs/cli.py @_app . command ( help = \"Prepares files in **mkdocs/docs** and then runs **mkdocs serve** command on them \" , ) def preview ( root_path : str = typer . Option ( \".\" , help = \"\" )): \"\"\"CLI command for creating files for nbdev_mkdocs command\"\"\" try : nbdev_mkdocs . mkdocs . preview ( root_path = root_path , port = 4000 ) except Exception as e : typer . secho ( \"Unexpected internal error :/\" , err = True , fg = typer . colors . RED ) raise typer . Exit ( 1 )","title":"preview()"},{"location":"API/nbdev_mkdocs/docstring/","text":"run_examples_from_docstring ( o , * , supress_stdout = False , supress_stderr = False , sub_dict = None , width = 80 , ** kwargs ) \u00a4 Runs example from a docstring Parses docstring of an objects looking for examples. The examples are then saved into files and executed in a separate process. Note Execution context is not the same as the one in the notebook because we want examples to work from user code. Make sure you compiled the library prior to executing the examples, otherwise you might be running them agains an old version of the library. Parameters: Name Type Description Default o Any an object, typically a function or a class, for which docstring is being parsed for examples required supress_stdout bool omit stdout from output, typically due to security considerations False supress_stderr bool omit stderr from output, typically due to security considerations False sub_dict Optional[Dict[str, str]] a dictionary mapping regexp patterns into replacement strings used to mask stdout and stderr, typically used to mask sensitive information such as passwords None **kwargs arguments use to replace \"{fill in param }\" in docstring with the actual values when running examples {} Exceptions: Type Description ValueError if some params are missing from the kwargs RuntimeException if example fails Examples: from nbdev_mkdocs.docstring import run_examples_from_docstring def f (): ``` python Example : print ( \"Hello {fill in name}!\" ) print ( \"Goodbye {fill in other_name}!\" ) ``` pass run_examples_from_docstring ( f , name = \"John\" , other_name = \"Jane\" ) Source code in nbdev_mkdocs/docstring.py def run_examples_from_docstring ( o : Any , * , supress_stdout : bool = False , supress_stderr : bool = False , sub_dict : Optional [ Dict [ str , str ]] = None , width : Optional [ int ] = 80 , ** kwargs , ): \"\"\"Runs example from a docstring Parses docstring of an objects looking for examples. The examples are then saved into files and executed in a separate process. Note: Execution context is not the same as the one in the notebook because we want examples to work from user code. Make sure you compiled the library prior to executing the examples, otherwise you might be running them agains an old version of the library. Args: o: an object, typically a function or a class, for which docstring is being parsed for examples supress_stdout: omit stdout from output, typically due to security considerations supress_stderr: omit stderr from output, typically due to security considerations sub_dict: a dictionary mapping regexp patterns into replacement strings used to mask stdout and stderr, typically used to mask sensitive information such as passwords **kwargs: arguments use to replace \"{fill in **param**}\" in docstring with the actual values when running examples Raises: ValueError: if some params are missing from the **kwargs** RuntimeException: if example fails Example: ```python from nbdev_mkdocs.docstring import run_examples_from_docstring def f(): ```python Example: print(\"Hello {fill in name}!\") print(\"Goodbye {fill in other_name}!\") ``` pass run_examples_from_docstring(f, name=\"John\", other_name=\"Jane\") ``` \"\"\" console = Console ( width = width ) examples = _extract_examples_from_docstring ( o ) if len ( examples ) == 0 : raise ValueError ( f \"No examples found in: \\n { o . __doc__ } \" ) executable_examples = _replace_keywords ( examples , ** kwargs ) for example , executable_example in zip ( examples , executable_examples ): with TemporaryDirectory () as d : cmd_path = ( Path ( d ) / \"example.py\" ) . absolute () with open ( cmd_path , \"w\" ) as f : f . write ( executable_example ) process = run ( # nosec: B603 [ sys . executable , str ( cmd_path )], capture_output = True , text = True ) group = Group ( \"Example:\" , Rule ( \"code\" ), textwrap . indent ( example , \" \" * 4 ), _format_output ( process . stdout , title = \"stdout\" , supress = supress_stdout , sub_dict = sub_dict , width = width , ), _format_output ( process . stderr , title = \"stderr\" , supress = supress_stderr , sub_dict = sub_dict , width = width , ), ) # print(Panel(panel_group, width=width)) console . print ( group ) if process . returncode != 0 : raise RuntimeError ( process . stderr )","title":"nbdev_mkdocs.docstring"},{"location":"API/nbdev_mkdocs/docstring/#nbdev_mkdocs.docstring.run_examples_from_docstring","text":"Runs example from a docstring Parses docstring of an objects looking for examples. The examples are then saved into files and executed in a separate process. Note Execution context is not the same as the one in the notebook because we want examples to work from user code. Make sure you compiled the library prior to executing the examples, otherwise you might be running them agains an old version of the library. Parameters: Name Type Description Default o Any an object, typically a function or a class, for which docstring is being parsed for examples required supress_stdout bool omit stdout from output, typically due to security considerations False supress_stderr bool omit stderr from output, typically due to security considerations False sub_dict Optional[Dict[str, str]] a dictionary mapping regexp patterns into replacement strings used to mask stdout and stderr, typically used to mask sensitive information such as passwords None **kwargs arguments use to replace \"{fill in param }\" in docstring with the actual values when running examples {} Exceptions: Type Description ValueError if some params are missing from the kwargs RuntimeException if example fails Examples: from nbdev_mkdocs.docstring import run_examples_from_docstring def f (): ``` python Example : print ( \"Hello {fill in name}!\" ) print ( \"Goodbye {fill in other_name}!\" ) ``` pass run_examples_from_docstring ( f , name = \"John\" , other_name = \"Jane\" ) Source code in nbdev_mkdocs/docstring.py def run_examples_from_docstring ( o : Any , * , supress_stdout : bool = False , supress_stderr : bool = False , sub_dict : Optional [ Dict [ str , str ]] = None , width : Optional [ int ] = 80 , ** kwargs , ): \"\"\"Runs example from a docstring Parses docstring of an objects looking for examples. The examples are then saved into files and executed in a separate process. Note: Execution context is not the same as the one in the notebook because we want examples to work from user code. Make sure you compiled the library prior to executing the examples, otherwise you might be running them agains an old version of the library. Args: o: an object, typically a function or a class, for which docstring is being parsed for examples supress_stdout: omit stdout from output, typically due to security considerations supress_stderr: omit stderr from output, typically due to security considerations sub_dict: a dictionary mapping regexp patterns into replacement strings used to mask stdout and stderr, typically used to mask sensitive information such as passwords **kwargs: arguments use to replace \"{fill in **param**}\" in docstring with the actual values when running examples Raises: ValueError: if some params are missing from the **kwargs** RuntimeException: if example fails Example: ```python from nbdev_mkdocs.docstring import run_examples_from_docstring def f(): ```python Example: print(\"Hello {fill in name}!\") print(\"Goodbye {fill in other_name}!\") ``` pass run_examples_from_docstring(f, name=\"John\", other_name=\"Jane\") ``` \"\"\" console = Console ( width = width ) examples = _extract_examples_from_docstring ( o ) if len ( examples ) == 0 : raise ValueError ( f \"No examples found in: \\n { o . __doc__ } \" ) executable_examples = _replace_keywords ( examples , ** kwargs ) for example , executable_example in zip ( examples , executable_examples ): with TemporaryDirectory () as d : cmd_path = ( Path ( d ) / \"example.py\" ) . absolute () with open ( cmd_path , \"w\" ) as f : f . write ( executable_example ) process = run ( # nosec: B603 [ sys . executable , str ( cmd_path )], capture_output = True , text = True ) group = Group ( \"Example:\" , Rule ( \"code\" ), textwrap . indent ( example , \" \" * 4 ), _format_output ( process . stdout , title = \"stdout\" , supress = supress_stdout , sub_dict = sub_dict , width = width , ), _format_output ( process . stderr , title = \"stderr\" , supress = supress_stderr , sub_dict = sub_dict , width = width , ), ) # print(Panel(panel_group, width=width)) console . print ( group ) if process . returncode != 0 : raise RuntimeError ( process . stderr )","title":"run_examples_from_docstring()"},{"location":"API/nbdev_mkdocs/mkdocs/","text":"new ( root_path ) \u00a4 Initialize mkdocs project files Creates mkdocs directory in the root_path directory and populates it with initial values. You should edit mkdocs.yml file to customize it if needed. Parameters: Name Type Description Default root_path str path under which mkdocs directory will be created required Source code in nbdev_mkdocs/mkdocs.py def new ( root_path : str ): \"\"\"Initialize mkdocs project files Creates **mkdocs** directory in the **root_path** directory and populates it with initial values. You should edit mkdocs.yml file to customize it if needed. Params: root_path: path under which mkdocs directory will be created \"\"\" _add_requirements_to_settings ( root_path ) _create_mkdocs_dir ( root_path ) _create_mkdocs_yaml ( root_path ) _create_summary_template ( root_path ) prepare ( root_path ) \u00a4 Prepares mkdocs for serving Parameters: Name Type Description Default root_path str path under which mkdocs directory will be created required Source code in nbdev_mkdocs/mkdocs.py def prepare ( root_path : str ): \"\"\"Prepares mkdocs for serving Params: root_path: path under which mkdocs directory will be created \"\"\" # copy cname if it exists copy_cname_if_needed ( root_path ) # get lib name from settings.ini settings_path = Path ( root_path ) / \"settings.ini\" config = ConfigParser () config . read ( settings_path ) lib_name = config [ \"DEFAULT\" ][ \"lib_name\" ] lib_path = config [ \"DEFAULT\" ][ \"lib_path\" ] build_summary ( root_path , lib_path ) cmd = f \"mkdocs build -f { root_path } /mkdocs/mkdocs.yml\" # nosemgrep: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true sp = subprocess . run ( # nosec: B602:subprocess_popen_with_shell_equals_true cmd , shell = True , # check=True, stdout = subprocess . PIPE , stderr = subprocess . STDOUT , text = True , ) print ( sp . stdout ) if sp . returncode != 0 : typer . secho ( f \"Command ' { cmd } ' failed!\" , err = True , fg = typer . colors . RED , ) raise typer . Exit ( 5 ) preview ( root_path , port = None ) \u00a4 Previes mkdocs documentation Parameters: Name Type Description Default root_path str path under which mkdocs directory will be created required port Optional[int] port to use None Source code in nbdev_mkdocs/mkdocs.py def preview ( root_path : str , port : Optional [ int ] = None ): \"\"\"Previes mkdocs documentation Params: root_path: path under which mkdocs directory will be created port: port to use \"\"\" cmd = f \"mkdocs serve -f { root_path } /mkdocs/mkdocs.yml -a 0.0.0.0\" if port : cmd = cmd + f \": { port } \" with subprocess . Popen ( #nosec B603:subprocess_without_shell_equals_true shlex . split ( cmd ), stdout = subprocess . PIPE , bufsize = 1 , text = True , universal_newlines = True , ) as p : for line in p . stdout : # type: ignore print ( line , end = \"\" ) if p . returncode != 0 : typer . secho ( f \"Command ' { cmd } ' failed!\" , err = True , fg = typer . colors . RED , ) raise typer . Exit ( 6 )","title":"nbdev_mkdocs.mkdocs"},{"location":"API/nbdev_mkdocs/mkdocs/#nbdev_mkdocs.mkdocs.new","text":"Initialize mkdocs project files Creates mkdocs directory in the root_path directory and populates it with initial values. You should edit mkdocs.yml file to customize it if needed. Parameters: Name Type Description Default root_path str path under which mkdocs directory will be created required Source code in nbdev_mkdocs/mkdocs.py def new ( root_path : str ): \"\"\"Initialize mkdocs project files Creates **mkdocs** directory in the **root_path** directory and populates it with initial values. You should edit mkdocs.yml file to customize it if needed. Params: root_path: path under which mkdocs directory will be created \"\"\" _add_requirements_to_settings ( root_path ) _create_mkdocs_dir ( root_path ) _create_mkdocs_yaml ( root_path ) _create_summary_template ( root_path )","title":"new()"},{"location":"API/nbdev_mkdocs/mkdocs/#nbdev_mkdocs.mkdocs.prepare","text":"Prepares mkdocs for serving Parameters: Name Type Description Default root_path str path under which mkdocs directory will be created required Source code in nbdev_mkdocs/mkdocs.py def prepare ( root_path : str ): \"\"\"Prepares mkdocs for serving Params: root_path: path under which mkdocs directory will be created \"\"\" # copy cname if it exists copy_cname_if_needed ( root_path ) # get lib name from settings.ini settings_path = Path ( root_path ) / \"settings.ini\" config = ConfigParser () config . read ( settings_path ) lib_name = config [ \"DEFAULT\" ][ \"lib_name\" ] lib_path = config [ \"DEFAULT\" ][ \"lib_path\" ] build_summary ( root_path , lib_path ) cmd = f \"mkdocs build -f { root_path } /mkdocs/mkdocs.yml\" # nosemgrep: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true sp = subprocess . run ( # nosec: B602:subprocess_popen_with_shell_equals_true cmd , shell = True , # check=True, stdout = subprocess . PIPE , stderr = subprocess . STDOUT , text = True , ) print ( sp . stdout ) if sp . returncode != 0 : typer . secho ( f \"Command ' { cmd } ' failed!\" , err = True , fg = typer . colors . RED , ) raise typer . Exit ( 5 )","title":"prepare()"},{"location":"API/nbdev_mkdocs/mkdocs/#nbdev_mkdocs.mkdocs.preview","text":"Previes mkdocs documentation Parameters: Name Type Description Default root_path str path under which mkdocs directory will be created required port Optional[int] port to use None Source code in nbdev_mkdocs/mkdocs.py def preview ( root_path : str , port : Optional [ int ] = None ): \"\"\"Previes mkdocs documentation Params: root_path: path under which mkdocs directory will be created port: port to use \"\"\" cmd = f \"mkdocs serve -f { root_path } /mkdocs/mkdocs.yml -a 0.0.0.0\" if port : cmd = cmd + f \": { port } \" with subprocess . Popen ( #nosec B603:subprocess_without_shell_equals_true shlex . split ( cmd ), stdout = subprocess . PIPE , bufsize = 1 , text = True , universal_newlines = True , ) as p : for line in p . stdout : # type: ignore print ( line , end = \"\" ) if p . returncode != 0 : typer . secho ( f \"Command ' { cmd } ' failed!\" , err = True , fg = typer . colors . RED , ) raise typer . Exit ( 6 )","title":"preview()"},{"location":"guides/Guide_One/","text":"This file will become your README and also the index of your documentation. Install \u00a4 pip install nbdev_mkdocs How to use \u00a4 def f(s: str, i: int): \"\"\" A simple function Params: s: a name i: a number Example: ```python s = \"Hello World! \" i = 2 print(s * i) ``` \"\"\" print((s + \" \")*i) You can use the following code to run example from the function's documentation above: from nbdev_mkdocs.docstring import run_examples_from_docstring run_examples_from_docstring(f, supress_stderr=True) Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 s = \"Hello World! \" i = 2 print ( s * i ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Hello World! Hello World! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 N/A","title":"Guide One"},{"location":"guides/Guide_One/#install","text":"pip install nbdev_mkdocs","title":"Install"},{"location":"guides/Guide_One/#how-to-use","text":"def f(s: str, i: int): \"\"\" A simple function Params: s: a name i: a number Example: ```python s = \"Hello World! \" i = 2 print(s * i) ``` \"\"\" print((s + \" \")*i) You can use the following code to run example from the function's documentation above: from nbdev_mkdocs.docstring import run_examples_from_docstring run_examples_from_docstring(f, supress_stderr=True) Example: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 s = \"Hello World! \" i = 2 print ( s * i ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stdout \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Hello World! Hello World! \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stderr supressed \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 N/A","title":"How to use"}]}